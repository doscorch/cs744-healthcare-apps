{"version":3,"sources":["feathersClient.js","auth/usersService.js","errorHandling.js","auth/login.js","redux/actions/userActions.js","auth/register.js","users/userManager.js","auth/myAccount.js","App.js","serviceWorker.js","redux/reducers/userReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["app","feathers","restClient","rest","configure","fetch","window","authentication","storage","localStorage","users","client","service","registerUser","username","password","firstName","lastName","a","create","userRole","getUsers","find","then","u","data","getUser","query","length","undefined","patchUser","userPartial","patch","_id","loginUser","reAuthenticate","auth","userId","user","error","authenticate","strategy","console","log","message","logout","Login","state","login","e","preventDefault","setState","isActive","res","props","app_login","history","push","changeForm","propName","target","name","propValue","value","classes","paper","marginTop","display","flexDirection","alignItems","form","width","submit","margin","alert","this","Alert","severity","Container","component","maxWidth","style","Avatar","Typography","variant","noValidate","TextField","required","fullWidth","id","label","autoComplete","autoFocus","onChange","type","Button","color","onClick","Grid","container","justify","Link","href","React","Component","mapDispatch","args","connect","initState","success","Register","spacing","item","xs","sm","UserManager","getData","tableRef","options","sorting","search","paging","title","columns","field","editable","editComponent","Select","MenuItem","render","row","String","onRowUpdate","newData","oldData","_","MyAccount","enrollments","programs","fluid","Row","Col","Card","bg","padding","App","clickLogout","app_logout","Boolean","Navbar","sticky","expand","marginBottom","Brand","as","to","height","src","alt","Toggle","aria-controls","Collapse","Nav","className","exact","path","Home","backgroundColor","class","fontSize","withRouter","location","hostname","match","init","saved","sessionStorage","getItem","JSON","parse","reduce","action","reducer","setItem","stringify","combineReducers","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6788869e.chunk.js","sourcesContent":["import feathers from '@feathersjs/client';\nimport rest from '@feathersjs/rest-client';\n\nexport const app = feathers();\nconst restClient = rest('http://localhost:3030');\napp.configure(restClient.fetch(window.fetch));\napp.configure(feathers.authentication({\n    storage: window.localStorage\n}));\n\nexport default app;\n","\nimport { ERROR } from \"../errorHandling\";\nimport client from \"../feathersClient\";\n\nconst users = client.service('users');\n\n// call api to register user\nexport const registerUser = async (username, password, firstName, lastName) => {\n    return await users.create({ \"username\": username, \"password\": password, \"firstName\": firstName, \"lastName\": lastName, userRole: \"patient\" }, {});\n}\n\n// call api to get users\nexport const getUsers = async () => {\n    return users.find().then(u => u.data)\n}\n\n// call api to register user by username\nexport const getUser = async (username) => {\n    return users.find({\n        query: {\n            username: username\n        }\n    }).then(u => u.data.length ? u.data[0] : undefined)\n}\n\n// call api to update user\nexport const updateUser = async (user) => {\n    return await users.update(user._id, user, {});\n}\n\n// call api to patch user\nexport const patchUser = async (userPartial) => {\n    return await users.patch(userPartial._id, userPartial, {})\n}\n\n// call api to login user\nexport const loginUser = async (username, password) => {\n    try {\n        if (!username && !password) {\n            let auth = await client.reAuthenticate();\n            return {\n                userId: auth.user?._id,\n                username: auth.user?.username,\n                error: false,\n            }\n        } else {\n            let auth = await client.authenticate({\n                strategy: 'local',\n                username: username,\n                password: password,\n            });\n            return {\n                user: auth.user,\n                error: false,\n            }\n        }\n    } catch (error) {\n        console.log(error);\n        let message = error?.message ?? ERROR;\n        return {\n            error: message,\n        };\n    }\n}\n\n// logout user on client\nexport const logout = async () => {\n    return await client.logout();\n}\n\n","export const ERROR = \"something is not working right :(\";\n\nexport const goHome = () => {\n    window.location.href = '/';\n}","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { getUser, loginUser } from './usersService';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions'\n\nclass Login extends React.Component {\n    state = {\n        username: \"\",\n        password: \"\",\n        error: \"\",\n    }\n\n    login = async (e) => {\n        e.preventDefault();\n        // get user from db\n        let user = await getUser(this.state.username);\n        if (!user) {\n            this.setState({ error: \"invalid login\" });\n        }\n        else if (!(user.isActive || typeof user.isActive === \"undefined\")) {\n            // inactive users cant login!\n            this.setState({ error: \"This account is no longer active. Contact staff.\" });\n        }\n        else {\n            // log the user in and go home\n            let res = await loginUser(this.state.username, this.state.password);\n            if (res.error) {\n                this.setState({ error: res.error });\n            }\n            else {\n                this.props.app_login(res.user);\n                this.props.history.push('/');\n            }\n        }\n    }\n\n    changeForm = (e) => {\n        let propName = e.target.name;\n        let propValue = e.target.value;\n        let state = { ...this.state };\n        state[propName] = propValue;\n        this.setState(state);\n    }\n\n    render() {\n        const classes = {\n            paper: {\n                marginTop: \"10px\",\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n            },\n            form: {\n                width: '100%',\n                marginTop: \"10px\",\n            },\n            submit: {\n                margin: \"10px\",\n            },\n        };\n        let alert = this.state.error ? <Alert severity=\"error\">{this.state.error}</Alert> : \"\";\n\n        return (\n            <Container component=\"main\" maxWidth=\"xs\">\n                <div style={classes.paper}>\n                    <Avatar />\n                    <Typography component=\"h1\" variant=\"h5\">Login</Typography>\n                    <form style={classes.form} noValidate>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"username\"\n                            label=\"Username\"\n                            name=\"username\"\n                            autoComplete=\"username\"\n                            autoFocus\n                            onChange={this.changeForm}\n                            value={this.state.username}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                            onChange={this.changeForm}\n                            value={this.state.password}\n                        />\n\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            style={classes.submit}\n                            onClick={this.login}>\n                            Log In\n                        </Button>\n                        <Grid container justify=\"center\">\n                            <Link href=\"/register\">\n                                {\"Don't have an account? Sign Up\"}\n                            </Link>\n                        </Grid>\n                    </form>\n                    {alert}\n                </div>\n            </Container>\n        );\n    }\n}\n\nconst mapState = (state) => { return { user: state.user } };\nconst mapDispatch = { app_login };\n\nexport default connect(mapState, mapDispatch)(Login);","export const app_login = args => ({\n    type: \"LOGIN\",\n    user: args\n});\n\nexport const app_logout = args => ({\n    type: \"LOGOUT\",\n});","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { registerUser } from './usersService';\nconst initState = {\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    error: \"\",\n    success: \"\"\n}\n\nexport default class Register extends React.Component {\n\n    state = {\n        ...initState\n    }\n\n    registerUser = async (e) => {\n        e.preventDefault();\n        // error handling\n        if (!this.state.username) {\n            this.setState({ error: \"please provide username\" })\n            return;\n        }\n        if (!this.state.password) {\n            this.setState({ error: \"please provide password\" })\n            return;\n        }\n\n        // register user\n        await registerUser(this.state.username, this.state.password, this.state.firstName, this.state.lastName)\n        this.setState({ ...initState, success: \"user successfully created.. please login\" });\n    }\n\n    changeForm = (e) => {\n        let propName = e.target.name;\n        let propValue = e.target.value;\n        let state = { ...this.state };\n        state[propName] = propValue;\n        this.setState(state);\n    }\n\n    render() {\n        const classes = {\n            paper: {\n                marginTop: \"10px\",\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n            },\n            form: {\n                width: '100%',\n                marginTop: \"10px\"\n            },\n            submit: {\n                margin: \"10px\"\n            },\n        };\n        let error = this.state.error ? <Alert severity=\"error\">{this.state.error}</Alert> : \"\";\n        let success = this.state.success ? <Alert severity=\"success\">{this.state.success}</Alert> : \"\";\n\n        return (\n            <Container component=\"main\" maxWidth=\"xs\" >\n                <div style={classes.paper}>\n                    <Avatar />\n                    <Typography component=\"h1\" variant=\"h5\">Register</Typography>\n                    <form style={classes.form} noValidate>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    autoComplete=\"fname\"\n                                    name=\"firstName\"\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"firstName\"\n                                    label=\"First Name\"\n                                    autoFocus\n                                    value={this.state.firstName}\n                                    onChange={this.changeForm}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"lastName\"\n                                    label=\"Last Name\"\n                                    name=\"lastName\"\n                                    autoComplete=\"lname\"\n                                    value={this.state.lastName}\n                                    onChange={this.changeForm}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    id=\"username\"\n                                    label=\"username\"\n                                    name=\"username\"\n                                    autoComplete=\"username\"\n                                    value={this.state.username}\n                                    onChange={this.changeForm}\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    value={this.state.password}\n                                    onChange={this.changeForm}\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            style={classes.submit}\n                            onClick={this.registerUser}>\n                            Register\n                        </Button>\n                        <Grid container justify=\"center\">\n                            <Grid item>\n                                <Link href=\"/login\">\n                                    Already have an account? Login\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                    {error}\n                    {success}\n                </div>\n            </Container>\n        );\n    }\n}","import * as React from 'react';\nimport MaterialTable from 'material-table';\nimport { Select, MenuItem } from '@material-ui/core'\nimport { getUsers, patchUser } from '../auth/usersService';\n\nexport default class UserManager extends React.Component {\n    state = {\n        users: []\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    getData = () => {\n        let url = 'http://localhost:3030/users'\n        return getUsers()\n            .then(users => {\n                this.setState({ users: users })\n            })\n    }\n\n    render() {\n        const tableRef = React.createRef();\n        return (\n            <MaterialTable\n                tableRef={tableRef}\n                options={{\n                    sorting: true,\n                    search: true,\n                    paging: false,\n                }}\n                title=\"Users\"\n                columns={[\n                    // { title: 'Id', field: '_id' },\n                    { title: 'Username', field: 'username', editable: false },\n                    { title: 'First Name', field: 'firstName' },\n                    { title: 'Last Name', field: 'lastName' },\n                    {\n                        title: 'User Role',\n                        field: 'userRole',\n                        editComponent: props => (\n                            <Select\n                                id=\"userrole\"\n                                value={props.value || false}\n                                onChange={e => props.onChange(e.target.value)}\n                            >\n                                <MenuItem value={\"physician\"}>physician</MenuItem>\n                                <MenuItem value={\"patient\"}>patient</MenuItem>\n                                <MenuItem value={\"admin\"}>admin</MenuItem>\n                            </Select>),\n                    },\n                    {\n                        title: 'Is Active',\n                        field: 'isActive',\n                        render: row => (<span>{String(typeof row.isActive === \"undefined\" ? true : row.isActive)}</span>),\n                        editComponent: props => (\n                            <Select\n                                id=\"isActive\"\n                                value={typeof props.value === \"undefined\" ? true : props.value}\n                                onChange={e => props.onChange(e.target.value)}\n                            >\n                                <MenuItem value={true}>true</MenuItem>\n                                <MenuItem value={false}>false</MenuItem>\n                            </Select>),\n                    },\n                ]}\n                data={this.state.users}\n                editable={{\n                    onRowUpdate: (newData, oldData) => {\n                        return patchUser(newData).then(_ => this.getData())\n                    },\n                }}\n            />\n        )\n    }\n\n}\n","import React from 'react';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\n\nclass MyAccount extends React.Component {\n    state = {\n        enrollments: [],\n        programs: [],\n    }\n\n    render() {\n        const user = this.props.user;\n        return (\n            <Container fluid>\n                <Row>\n                    <Col>\n                        <Card bg=\"light\" style={{ padding: \"10px\" }}>\n                            <Row>\n                                <Col>\n                                    <h4>Account Information</h4>\n                                    <hr></hr>\n                                    <h6>First Name</h6>\n                                    <p>{user.firstName}</p>\n                                    <h6>Last Name</h6>\n                                    <p>{user.lastName}</p>\n                                    <h6>Username</h6>\n                                    <p>{user.username}</p>\n                                    <h6>Account Type</h6>\n                                    <p>{user.userRole}</p>\n                                </Col>\n                            </Row>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\n\nconst mapState = (state) => { return { user: state.user } };\nconst mapDispatch = {};\n\nexport default connect(mapState, mapDispatch)(MyAccount);","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { Route, Link } from 'react-router-dom';\nimport Login from './auth/login';\nimport Register from './auth/register';\nimport './App.css';\nimport { logout } from './auth/usersService';\nimport { withRouter } from 'react-router-dom';\nimport { app_logout } from './redux/actions/userActions';\nimport { connect } from 'react-redux';\nimport UserManager from './users/userManager'\nimport MyAccount from './auth/myAccount';\n\nclass App extends React.Component {\n\n  clickLogout = async (e) => {\n    e.preventDefault();\n    await logout();\n    this.props.app_logout();\n    this.props.history.push('/');\n  }\n  render() {\n    const hasUser = Boolean(this.props.user._id);\n    const isAdmin = this.props.user.userRole === \"admin\";\n    return (\n      <div>\n        <Navbar sticky=\"top\" bg=\"dark\" variant=\"dark\" expand=\"lg\" style={{ marginBottom: \"10px\" }}>\n          <Navbar.Brand as={Link} to=\"/\"><img style={{ width: \"30px\", height: \"30px\" }} src=\"../logo.png\" alt=\"logo\"></img> Healthcare System</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              {/* {isAdmin ? <Nav.Link as={Link} to=\"/user-manager\">Manage Users</Nav.Link> : \"\"} */}\n            </Nav>\n            <Nav>\n              {/* {hasUser ? <Nav.Link as={Link} to=\"/\" onClick={this.clickLogout}><i className=\"fas fa-sign-out-alt\"></i> Logout</Nav.Link> : \"\"} */}\n              {/* {hasUser ? <Nav.Link as={Link} to=\"/account\"><i className=\"fas fa-user\"></i> {this.props.user.username}</Nav.Link> : \"\"} */}\n              {/* {!hasUser ? <Nav.Link as={Link} to=\"/login\"><i className=\"fas fa-sign-in-alt\"></i> Login</Nav.Link> : \"\"} */}\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/home\" component={Home} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/account\" component={MyAccount} />\n        <Route path=\"/user-manager\" component={UserManager} />\n      </div>\n    );\n  }\n}\n\nfunction Home() {\n  return (\n    <div className=\"container\" style={{ backgroundColor: \"darkgrey\" }}>\n      <div class=\"row\">\n        <div style={{ margin: \"auto\", marginBottom: \"20px\" }}>\n          <img src=\"../logo.png\" alt=\"home image\" style={{ width: \"100px\" }}></img>\n          <span style={{ fontSize: \"3em\" }}></span>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"card card-body bg-light\" style={{ height: \"300px\" }}>\n          <span >\n            Welcome to the Healthcare application.\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst mapState = (state) => { return { user: state.user } };\nconst mapDispatch = { app_logout };\nexport default connect(mapState, mapDispatch)(withRouter(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import reducers from \".\";\n\nconst STORAGE_KEY = \"user\";\nconst init = () => {\n    let saved = sessionStorage.getItem(STORAGE_KEY);\n    if (saved)\n        saved = JSON.parse(saved);\n    return saved || {};\n}\n\nconst reduce = (state, action) => {\n    switch (action.type) {\n        case \"LOGIN\": {\n            return {\n                ...action.user,\n            };\n        }\n        case \"LOGOUT\": {\n            return {\n\n            };\n        }\n        default:\n            return state;\n    }\n}\nconst reducer = (state = init(), action) => {\n    state = reduce(state, action);\n    sessionStorage.setItem(STORAGE_KEY, JSON.stringify(state));\n    return state;\n}\n\nexport default reducer;","import { combineReducers } from \"redux\";\nimport user from \"./userReducer\";\n\nexport default combineReducers({ user });\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}