{"ast":null,"code":"var _classCallCheck = require(\"/home/diedrick.nathan/cs744-healthcare-apps/healthcare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/diedrick.nathan/cs744-healthcare-apps/healthcare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/diedrick.nathan/cs744-healthcare-apps/healthcare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/diedrick.nathan/cs744-healthcare-apps/healthcare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Base = require('./base');\n\nvar FetchService = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(FetchService, _Base);\n\n  var _super = _createSuper(FetchService);\n\n  function FetchService() {\n    _classCallCheck(this, FetchService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FetchService, [{\n    key: \"request\",\n    value: function request(options, params) {\n      var fetchOptions = Object.assign({}, options, params.connection);\n      fetchOptions.headers = Object.assign({\n        Accept: 'application/json'\n      }, this.options.headers, fetchOptions.headers);\n\n      if (options.body) {\n        fetchOptions.body = JSON.stringify(options.body);\n      }\n\n      var fetch = this.connection;\n      return fetch(options.url, fetchOptions).then(this.checkStatus).then(function (response) {\n        if (response.status === 204) {\n          return null;\n        }\n\n        return response.json();\n      });\n    }\n  }, {\n    key: \"checkStatus\",\n    value: function checkStatus(response) {\n      if (response.ok) {\n        return response;\n      }\n\n      return response.json().catch(function () {\n        var ErrorClass = errors[response.status] || Error;\n        return new ErrorClass('JSON parsing error');\n      }).then(function (error) {\n        error.response = response;\n        throw error;\n      });\n    }\n  }]);\n\n  return FetchService;\n}(Base);\n\nmodule.exports = FetchService;","map":{"version":3,"sources":["/home/diedrick.nathan/cs744-healthcare-apps/healthcare/client/node_modules/@feathersjs/rest-client/lib/fetch.js"],"names":["Base","require","FetchService","options","params","fetchOptions","Object","assign","connection","headers","Accept","body","JSON","stringify","fetch","url","then","checkStatus","response","status","json","ok","catch","ErrorClass","errors","Error","error","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;IAEMC,Y;;;;;;;;;;;;;;;4BACKC,O,EAASC,M,EAAQ;AACxB,UAAIC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,EAA2BC,MAAM,CAACI,UAAlC,CAAnB;AAEAH,MAAAA,YAAY,CAACI,OAAb,GAAuBH,MAAM,CAACC,MAAP,CAAc;AACnCG,QAAAA,MAAM,EAAE;AAD2B,OAAd,EAEpB,KAAKP,OAAL,CAAaM,OAFO,EAEEJ,YAAY,CAACI,OAFf,CAAvB;;AAIA,UAAIN,OAAO,CAACQ,IAAZ,EAAkB;AAChBN,QAAAA,YAAY,CAACM,IAAb,GAAoBC,IAAI,CAACC,SAAL,CAAeV,OAAO,CAACQ,IAAvB,CAApB;AACD;;AAED,UAAMG,KAAK,GAAG,KAAKN,UAAnB;AAEA,aAAOM,KAAK,CAACX,OAAO,CAACY,GAAT,EAAcV,YAAd,CAAL,CACJW,IADI,CACC,KAAKC,WADN,EAEJD,IAFI,CAEC,UAAAE,QAAQ,EAAI;AAChB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,iBAAO,IAAP;AACD;;AAED,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,OARI,CAAP;AASD;;;gCAEYF,Q,EAAU;AACrB,UAAIA,QAAQ,CAACG,EAAb,EAAiB;AACf,eAAOH,QAAP;AACD;;AAED,aAAOA,QAAQ,CAACE,IAAT,GAAgBE,KAAhB,CAAsB,YAAM;AACjC,YAAMC,UAAU,GAAGC,MAAM,CAACN,QAAQ,CAACC,MAAV,CAAN,IAA2BM,KAA9C;AAEA,eAAO,IAAIF,UAAJ,CAAe,oBAAf,CAAP;AACD,OAJM,EAIJP,IAJI,CAIC,UAAAU,KAAK,EAAI;AACfA,QAAAA,KAAK,CAACR,QAAN,GAAiBA,QAAjB;AACA,cAAMQ,KAAN;AACD,OAPM,CAAP;AAQD;;;;EAtCwB1B,I;;AAyC3B2B,MAAM,CAACC,OAAP,GAAiB1B,YAAjB","sourcesContent":["const Base = require('./base');\n\nclass FetchService extends Base {\n  request (options, params) {\n    let fetchOptions = Object.assign({}, options, params.connection);\n\n    fetchOptions.headers = Object.assign({\n      Accept: 'application/json'\n    }, this.options.headers, fetchOptions.headers);\n\n    if (options.body) {\n      fetchOptions.body = JSON.stringify(options.body);\n    }\n\n    const fetch = this.connection;\n\n    return fetch(options.url, fetchOptions)\n      .then(this.checkStatus)\n      .then(response => {\n        if (response.status === 204) {\n          return null;\n        }\n\n        return response.json();\n      });\n  }\n\n  checkStatus (response) {\n    if (response.ok) {\n      return response;\n    }\n\n    return response.json().catch(() => {\n      const ErrorClass = errors[response.status] || Error;\n      \n      return new ErrorClass('JSON parsing error');\n    }).then(error => {\n      error.response = response;\n      throw error;\n    });\n  }\n}\n\nmodule.exports = FetchService;\n"]},"metadata":{},"sourceType":"script"}