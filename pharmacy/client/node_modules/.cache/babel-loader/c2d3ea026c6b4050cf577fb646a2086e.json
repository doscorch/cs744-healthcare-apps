{"ast":null,"code":"var _jsxFileName = \"/Users/doscorch/Desktop/cs744 project/healthcare/client/src/auth/securityQuestion.js\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\nimport { answerSecurityQuestion, getQuestions } from './usersService';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nconst initState = {\n  answer: \"\",\n  question_id: \"\",\n  questions: [{\n    question_id: 0,\n    question: \"\"\n  }],\n  attempt_number: 1,\n  error: \"\",\n  user: {\n    user_id: 1\n  },\n  order: [0, 1, 2]\n};\n\nconst shuffle = array => {\n  let newOrder = new Array();\n\n  while (array.length > 0) {\n    const idx = Math.floor(Math.random() * array.length);\n    newOrder.push(array[idx]);\n    array.splice(idx, 1);\n  }\n\n  return newOrder;\n};\n\nexport class SecurityQuestion extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...initState\n    };\n\n    this.submitAnswer = async e => {\n      let response = await answerSecurityQuestion(this.state.user.user_id, this.state.questions[this.state.attempt_number - 1].question_id, this.state.answer, this.state.attempt_number);\n\n      if (response.msg) {\n        this.setState({\n          error: response.msg\n        });\n      }\n\n      if (!response.correct) {\n        //Answered incorrectly\n        let next_attempt = this.state.attempt_number + 1;\n\n        if (next_attempt > 3) {\n          this.setState({\n            error: \"Security Questions failed: Please contact administrator.\"\n          });\n        } else {\n          this.setState({\n            attempt_number: next_attempt\n          });\n        }\n      } else {\n        //Answered correctly\n        console.log('Correct');\n      }\n    };\n\n    this.changeForm = e => {\n      let propName = e.target.name;\n      let propValue = e.target.value;\n      let state = { ...this.state\n      };\n      state[propName] = propValue;\n      this.setState(state);\n    };\n  }\n\n  async componentDidMount() {\n    let questions = await getQuestions(this.state.user);\n    let state = { ...this.state\n    };\n    state.questions = shuffle(questions);\n    this.setState(state);\n  }\n\n  render() {\n    const classes = {\n      paper: {\n        marginTop: \"10px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      form: {\n        width: '100%',\n        marginTop: \"10px\"\n      },\n      submit: {\n        margin: \"10px\"\n      }\n    };\n    let alert = this.state.error ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 40\n      }\n    }, this.state.error) : \"\";\n    return /*#__PURE__*/React.createElement(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: classes.papper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      component: \"h1\",\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, \"Security Question\"), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      component: \"h4\",\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, this.state.questions[this.state.attempt_number - 1].question), /*#__PURE__*/React.createElement(TextField, {\n      variant: \"outlined\",\n      margin: \"normal\",\n      fullWidth: true,\n      name: \"answer\",\n      label: \"Answer\",\n      id: \"security_answer\",\n      required: true,\n      autoFocus: true,\n      autoComplete: \"auto-answer\",\n      onChange: this.changeForm,\n      value: this.state.answer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      style: classes.submit,\n      onClick: this.submitAnswer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }, \"Submit\")), alert));\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    user: state.user\n  };\n};\n\nconst mapDispatch = {\n  app_login\n};\nexport default connect(mapState, mapDispatch)(SecurityQuestion);","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/healthcare/client/src/auth/securityQuestion.js"],"names":["React","Button","TextField","Grid","Container","Typography","Alert","answerSecurityQuestion","getQuestions","connect","app_login","initState","answer","question_id","questions","question","attempt_number","error","user","user_id","order","shuffle","array","newOrder","Array","length","idx","Math","floor","random","push","splice","SecurityQuestion","Component","state","submitAnswer","e","response","msg","setState","correct","next_attempt","console","log","changeForm","propName","target","name","propValue","value","componentDidMount","render","classes","paper","marginTop","display","flexDirection","alignItems","form","width","submit","margin","alert","papper","mapState","mapDispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { answerSecurityQuestion, getQuestions } from './usersService';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nconst initState = {\n    answer: \"\",\n    question_id: \"\",\n    questions: [{question_id:0,question:\"\"}],\n    attempt_number: 1,\n    error: \"\",\n    user:{\n        user_id: 1\n    },\n    order:[0,1,2]\n}\n\nconst shuffle = (array) => {\n    let newOrder = new Array();\n    while(array.length>0){\n        const idx = Math.floor(Math.random()*(array.length));\n        newOrder.push(array[idx]);\n        array.splice(idx, 1)\n    }\n    return newOrder;\n}\n\nexport class SecurityQuestion extends React.Component{\n    state = {\n        ...initState\n    }\n\n    submitAnswer = async (e) => {\n        let response = await answerSecurityQuestion(this.state.user.user_id, this.state.questions[this.state.attempt_number-1].question_id, \n            this.state.answer, this.state.attempt_number);\n\n        if(response.msg){\n            this.setState({ error: response.msg});\n        }\n        \n        if(!response.correct){\n            //Answered incorrectly\n            let next_attempt = this.state.attempt_number+1;\n            if(next_attempt>3){\n                this.setState({ error: \"Security Questions failed: Please contact administrator.\"});\n            }else{\n                this.setState({ attempt_number: next_attempt});\n            }\n        }else{\n            //Answered correctly\n            console.log('Correct');\n        }\n    }\n\n    changeForm = (e) => {\n        let propName = e.target.name;\n        let propValue = e.target.value;\n        let state = { ...this.state };\n        state[propName] = propValue;\n        this.setState(state);\n    }\n\n    async componentDidMount(){\n        let questions = await getQuestions(this.state.user);\n        let state = { ...this.state };\n        state.questions = shuffle(questions);\n        this.setState(state);\n    }\n\n    render() {\n        const classes = {\n            paper: {\n                marginTop: \"10px\",\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n            },\n            form: {\n                width: '100%',\n                marginTop: \"10px\",\n            },\n            submit: {\n                margin: \"10px\",\n            },\n        };\n\n        let alert = this.state.error ? <Alert severity=\"error\">{this.state.error}</Alert> : \"\";\n\n        return(\n            <Container component=\"main\" maxWidth=\"xs\">\n                <div style={classes.papper}>\n                    <Typography component=\"h1\" variant=\"h5\">Security Question</Typography>\n                    <Grid container justify=\"center\">\n                        <Typography component=\"h4\" variant=\"h5\">{this.state.questions[this.state.attempt_number-1].question}</Typography>\n                        <TextField \n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            fullWidth\n                            name=\"answer\"\n                            label= \"Answer\"\n                            id=\"security_answer\"\n                            required\n                            autoFocus\n                            autoComplete=\"auto-answer\"\n                            onChange={this.changeForm}\n                            value={this.state.answer} />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            style={classes.submit}\n                            onClick={this.submitAnswer}>\n                            Submit\n                        </Button>\n                    </Grid>\n                    {alert}\n                </div>\n            </Container>\n        );\n    }\n}\n\nconst mapState = (state) => { return { user: state.user } };\nconst mapDispatch = { app_login };\n\nexport default connect(mapState, mapDispatch)(SecurityQuestion);"]},"metadata":{},"sourceType":"module"}