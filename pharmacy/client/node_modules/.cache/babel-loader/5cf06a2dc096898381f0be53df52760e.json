{"ast":null,"code":"var _jsxFileName = \"/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/medicines/medicineManager.js\";\nimport * as React from 'react';\nimport MaterialTable from 'material-table';\nimport TextField from '@material-ui/core/TextField';\nimport { createMedicine, getMedicines, patchMedicine, deleteMedicine } from './medicinesService';\nimport { Select, MenuItem } from '@material-ui/core';\nconst zipRegex = /^\\d{5}$|^\\d{5}-\\d{4}$/;\nexport default class MedicineManager extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      medicines: []\n    };\n\n    this.getData = () => {\n      return getMedicines().then(medicines => {\n        this.setState({\n          medicines: medicines\n        });\n      });\n    };\n\n    this.generateCode = () => {};\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const tableRef = React.createRef();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MaterialTable, {\n      tableRef: tableRef,\n      options: {\n        sorting: true,\n        search: true,\n        paging: false,\n        editable: true\n      },\n      title: \"Medicines\",\n      columns: [{\n        title: 'Medicine Code',\n        field: 'medicine_code',\n        validate: u => u.medicine_code == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Medicine Code',\n        field: 'medicine_code',\n        render: u => /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 42\n          }\n        }, u.medicine_code),\n        validate: u => u.medicine_code == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        },\n        editComponent: props => /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 37\n          }\n        }, \"props.value\"))\n      }, {\n        title: 'Medical Name',\n        field: 'medical_name',\n        validate: u => u.medical_name == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Commercial Name',\n        field: 'commercial_name',\n        validate: u => u.commercial_name == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Type',\n        field: 'medicine_type',\n        validate: u => u.medicine_type == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        },\n        lookup: {\n          1: 'capsule',\n          2: 'tablet',\n          3: 'liquid'\n        }\n      }, {\n        title: 'Recommended Dosage',\n        field: 'recommended_dosage',\n        validate: u => u.recommended_dosage == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Quantity',\n        field: 'quantity',\n        type: 'numeric',\n        validate: u => u.quantity == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Vendor',\n        field: 'vendor',\n        validate: u => u.vendor == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Expiration Date',\n        field: 'expiration_date',\n        type: 'date',\n        validate: u => u.expiration_date == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }],\n      data: this.state.medicines,\n      editable: {\n        onRowUpdate: (newData, oldData) => {\n          return patchMedicine(newData.medicine_id, newData).then(_ => this.getData());\n        },\n        onRowAdd: newData => {\n          return createMedicine(newData).then(_ => this.getData());\n        },\n        onRowDelete: oldData => {\n          return deleteMedicine(oldData.medicine_id).then(_ => this.getData());\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/medicines/medicineManager.js"],"names":["React","MaterialTable","TextField","createMedicine","getMedicines","patchMedicine","deleteMedicine","Select","MenuItem","zipRegex","MedicineManager","Component","state","medicines","getData","then","setState","generateCode","componentDidMount","render","tableRef","createRef","sorting","search","paging","editable","title","field","validate","u","medicine_code","isValid","helperText","editComponent","props","medical_name","commercial_name","medicine_type","lookup","recommended_dosage","type","quantity","vendor","expiration_date","onRowUpdate","newData","oldData","medicine_id","_","onRowAdd","onRowDelete"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport MaterialTable from 'material-table';\nimport TextField from '@material-ui/core/TextField';\nimport { createMedicine, getMedicines, patchMedicine, deleteMedicine } from './medicinesService';\nimport { Select, MenuItem } from '@material-ui/core'\n\nconst zipRegex = /^\\d{5}$|^\\d{5}-\\d{4}$/;\n\nexport default class MedicineManager extends React.Component {\n    state = {\n        medicines: []\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    getData = () => {\n        return getMedicines()\n            .then(medicines => {\n                this.setState({ medicines: medicines })\n            })\n    }\n\n    generateCode = () => {\n\n    }\n\n    render() {\n        const tableRef = React.createRef();\n        return (\n            <div>\n                <MaterialTable\n                    tableRef={tableRef}\n                    options={{\n                        sorting: true,\n                        search: true,\n                        paging: false,\n                        editable: true,\n                    }}\n                    title=\"Medicines\"\n                    columns={[\n                        { title: 'Medicine Code', field: 'medicine_code', validate: u => u.medicine_code == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        {\n                            title: 'Medicine Code',\n                            field: 'medicine_code',\n                            render: u => <span>{u.medicine_code}</span>,\n                            validate: u => u.medicine_code == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true },\n                            editComponent: props => (\n                                <div>\n                                    <span>props.value</span>\n                                </div>),\n                        },\n                        { title: 'Medical Name', field: 'medical_name', validate: u => u.medical_name == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Commercial Name', field: 'commercial_name', validate: u => u.commercial_name == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Type', field: 'medicine_type', validate: u => u.medicine_type == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true }, lookup: { 1: 'capsule', 2: 'tablet', 3: 'liquid' }, },\n                        { title: 'Recommended Dosage', field: 'recommended_dosage', validate: u => u.recommended_dosage == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Quantity', field: 'quantity', type: 'numeric', validate: u => u.quantity == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Vendor', field: 'vendor', validate: u => u.vendor == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Expiration Date', field: 'expiration_date', type: 'date', validate: u => u.expiration_date == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                    ]}\n                    data={this.state.medicines}\n                    editable={{\n                        onRowUpdate: (newData, oldData) => {\n                            return patchMedicine(newData.medicine_id, newData).then(_ => this.getData())\n                        },\n                        onRowAdd: newData => {\n                            return createMedicine(newData).then(_ => this.getData())\n                        },\n                        onRowDelete: oldData => {\n                            return deleteMedicine(oldData.medicine_id).then(_ => this.getData())\n                        }\n                    }}\n                />\n            </div>\n\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}