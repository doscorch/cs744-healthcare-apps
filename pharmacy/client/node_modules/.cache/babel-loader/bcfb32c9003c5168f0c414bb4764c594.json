{"ast":null,"code":"import { ERROR } from \"../errorHandling\";\nimport client from \"../feathersClient\";\nconst users = client.service('users'); // call api to register user\n\nexport const registerUser = async (username, password, firstName, lastName) => {\n  return await users.create({\n    \"username\": username,\n    \"password\": password,\n    \"firstName\": firstName,\n    \"lastName\": lastName,\n    userRole: \"patient\"\n  }, {});\n}; // call api to get users\n\nexport const getUsers = async () => {\n  return users.find().then(u => u.data);\n}; // call api to register user by username\n\nexport const getUser = async username => {\n  return users.find({\n    query: {\n      username: username\n    }\n  }).then(u => u.data.length ? u.data[0] : undefined);\n}; // call api to update user\n\nexport const updateUser = async user => {\n  return await users.update(user._id, user, {});\n}; // call api to patch user\n\nexport const patchUser = async userPartial => {\n  return await users.patch(userPartial._id, userPartial, {});\n}; // call api to login user\n\nexport const loginUser = async (username, password) => {\n  try {\n    if (!username && !password) {\n      var _auth$user, _auth$user2;\n\n      let auth = await client.reAuthenticate();\n      return {\n        userId: (_auth$user = auth.user) === null || _auth$user === void 0 ? void 0 : _auth$user._id,\n        username: (_auth$user2 = auth.user) === null || _auth$user2 === void 0 ? void 0 : _auth$user2.username,\n        error: false\n      };\n    } else {\n      let auth = await client.authenticate({\n        strategy: 'local',\n        username: username,\n        password: password\n      });\n      return {\n        user: auth.user,\n        error: false\n      };\n    }\n  } catch (error) {\n    var _error$message;\n\n    console.log(error);\n    let message = (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : ERROR;\n    return {\n      error: message\n    };\n  }\n}; // logout user on client\n\nexport const logout = async () => {\n  return await client.logout();\n};","map":{"version":3,"sources":["D:/School work/CS 744/cs744-healthcare-apps/healthcare/client/src/auth/usersService.js"],"names":["ERROR","client","users","service","registerUser","username","password","firstName","lastName","create","userRole","getUsers","find","then","u","data","getUser","query","length","undefined","updateUser","user","update","_id","patchUser","userPartial","patch","loginUser","auth","reAuthenticate","userId","error","authenticate","strategy","console","log","message","logout"],"mappings":"AACA,SAASA,KAAT,QAAsB,kBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,KAAK,GAAGD,MAAM,CAACE,OAAP,CAAe,OAAf,CAAd,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,QAAtC,KAAmD;AAC3E,SAAO,MAAMN,KAAK,CAACO,MAAN,CAAa;AAAE,gBAAYJ,QAAd;AAAwB,gBAAYC,QAApC;AAA8C,iBAAaC,SAA3D;AAAsE,gBAAYC,QAAlF;AAA4FE,IAAAA,QAAQ,EAAE;AAAtG,GAAb,EAAgI,EAAhI,CAAb;AACH,CAFM,C,CAIP;;AACA,OAAO,MAAMC,QAAQ,GAAG,YAAY;AAChC,SAAOT,KAAK,CAACU,IAAN,GAAaC,IAAb,CAAkBC,CAAC,IAAIA,CAAC,CAACC,IAAzB,CAAP;AACH,CAFM,C,CAIP;;AACA,OAAO,MAAMC,OAAO,GAAG,MAAOX,QAAP,IAAoB;AACvC,SAAOH,KAAK,CAACU,IAAN,CAAW;AACdK,IAAAA,KAAK,EAAE;AACHZ,MAAAA,QAAQ,EAAEA;AADP;AADO,GAAX,EAIJQ,IAJI,CAICC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOG,MAAP,GAAgBJ,CAAC,CAACC,IAAF,CAAO,CAAP,CAAhB,GAA4BI,SAJlC,CAAP;AAKH,CANM,C,CAQP;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAP,IAAgB;AACtC,SAAO,MAAMnB,KAAK,CAACoB,MAAN,CAAaD,IAAI,CAACE,GAAlB,EAAuBF,IAAvB,EAA6B,EAA7B,CAAb;AACH,CAFM,C,CAIP;;AACA,OAAO,MAAMG,SAAS,GAAG,MAAOC,WAAP,IAAuB;AAC5C,SAAO,MAAMvB,KAAK,CAACwB,KAAN,CAAYD,WAAW,CAACF,GAAxB,EAA6BE,WAA7B,EAA0C,EAA1C,CAAb;AACH,CAFM,C,CAIP;;AACA,OAAO,MAAME,SAAS,GAAG,OAAOtB,QAAP,EAAiBC,QAAjB,KAA8B;AACnD,MAAI;AACA,QAAI,CAACD,QAAD,IAAa,CAACC,QAAlB,EAA4B;AAAA;;AACxB,UAAIsB,IAAI,GAAG,MAAM3B,MAAM,CAAC4B,cAAP,EAAjB;AACA,aAAO;AACHC,QAAAA,MAAM,gBAAEF,IAAI,CAACP,IAAP,+CAAE,WAAWE,GADhB;AAEHlB,QAAAA,QAAQ,iBAAEuB,IAAI,CAACP,IAAP,gDAAE,YAAWhB,QAFlB;AAGH0B,QAAAA,KAAK,EAAE;AAHJ,OAAP;AAKH,KAPD,MAOO;AACH,UAAIH,IAAI,GAAG,MAAM3B,MAAM,CAAC+B,YAAP,CAAoB;AACjCC,QAAAA,QAAQ,EAAE,OADuB;AAEjC5B,QAAAA,QAAQ,EAAEA,QAFuB;AAGjCC,QAAAA,QAAQ,EAAEA;AAHuB,OAApB,CAAjB;AAKA,aAAO;AACHe,QAAAA,IAAI,EAAEO,IAAI,CAACP,IADR;AAEHU,QAAAA,KAAK,EAAE;AAFJ,OAAP;AAIH;AACJ,GAnBD,CAmBE,OAAOA,KAAP,EAAc;AAAA;;AACZG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,QAAIK,OAAO,qBAAGL,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEK,OAAV,2DAAqBpC,KAAhC;AACA,WAAO;AACH+B,MAAAA,KAAK,EAAEK;AADJ,KAAP;AAGH;AACJ,CA3BM,C,CA6BP;;AACA,OAAO,MAAMC,MAAM,GAAG,YAAY;AAC9B,SAAO,MAAMpC,MAAM,CAACoC,MAAP,EAAb;AACH,CAFM","sourcesContent":["\r\nimport { ERROR } from \"../errorHandling\";\r\nimport client from \"../feathersClient\";\r\n\r\nconst users = client.service('users');\r\n\r\n// call api to register user\r\nexport const registerUser = async (username, password, firstName, lastName) => {\r\n    return await users.create({ \"username\": username, \"password\": password, \"firstName\": firstName, \"lastName\": lastName, userRole: \"patient\" }, {});\r\n}\r\n\r\n// call api to get users\r\nexport const getUsers = async () => {\r\n    return users.find().then(u => u.data)\r\n}\r\n\r\n// call api to register user by username\r\nexport const getUser = async (username) => {\r\n    return users.find({\r\n        query: {\r\n            username: username\r\n        }\r\n    }).then(u => u.data.length ? u.data[0] : undefined)\r\n}\r\n\r\n// call api to update user\r\nexport const updateUser = async (user) => {\r\n    return await users.update(user._id, user, {});\r\n}\r\n\r\n// call api to patch user\r\nexport const patchUser = async (userPartial) => {\r\n    return await users.patch(userPartial._id, userPartial, {})\r\n}\r\n\r\n// call api to login user\r\nexport const loginUser = async (username, password) => {\r\n    try {\r\n        if (!username && !password) {\r\n            let auth = await client.reAuthenticate();\r\n            return {\r\n                userId: auth.user?._id,\r\n                username: auth.user?.username,\r\n                error: false,\r\n            }\r\n        } else {\r\n            let auth = await client.authenticate({\r\n                strategy: 'local',\r\n                username: username,\r\n                password: password,\r\n            });\r\n            return {\r\n                user: auth.user,\r\n                error: false,\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        let message = error?.message ?? ERROR;\r\n        return {\r\n            error: message,\r\n        };\r\n    }\r\n}\r\n\r\n// logout user on client\r\nexport const logout = async () => {\r\n    return await client.logout();\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}