{"ast":null,"code":"var _jsxFileName = \"/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/prescriptions/fillPrescription.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nimport { getPrescription, patchPrescription } from './prescriptionsService';\nimport { Button, Container, Col, Row } from 'react-bootstrap';\nimport MaterialTable from 'material-table';\nimport { getPhysicians } from '../physicians/physiciansService';\nimport { PrescriptionStatus } from '../models/prescription';\nimport { getMedicines, patchMedicine } from '../medicines/medicinesService';\nconst initState = {\n  prescription: \"\"\n};\nexport class FillPrescription extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...initState,\n      prescription: \"\",\n      medicines: []\n    };\n\n    this.changeForm = e => {\n      let propName = e.target.name;\n      let propValue = e.target.value;\n      let state = { ...this.state\n      };\n      state[propName] = propValue;\n      this.setState(state);\n    };\n  }\n\n  async componentDidMount() {\n    const prescription_id = this.props.match.params.prescription;\n    const prescription = await getPrescription(prescription_id);\n\n    if (prescription.error) {\n      this.setState({\n        error: prescription.error\n      });\n      return;\n    }\n\n    this.setState({\n      prescriptions: [prescription]\n    });\n    getMedicines().then(medicines => {\n      medicines = medicines.filter(m => m.requires_prescription);\n      this.setState({\n        medicines: medicines\n      });\n    });\n  }\n\n  render() {\n    const tableRef = React.createRef();\n    const tableRef1 = React.createRef();\n    return /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      className: \"card card-body bg-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 26\n      }\n    }, \"Fill Prescription \", /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-prescription-bottle-alt\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 48\n      }\n    })))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(MaterialTable, {\n      tableRef: tableRef,\n      options: {\n        sorting: false,\n        search: false,\n        paging: false,\n        editable: false\n      },\n      title: \"Prescription\",\n      columns: [{\n        title: 'Description',\n        field: \"prescription\"\n      }, {\n        title: 'Dosage',\n        field: 'dosage'\n      }, {\n        title: 'Quantity',\n        field: 'quantity'\n      }],\n      data: this.state.prescriptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(MaterialTable, {\n      tableRef: tableRef1,\n      options: {\n        sorting: true,\n        search: true,\n        paging: true,\n        editable: false,\n        pageSize: 5\n      },\n      title: \"Medicine Stock\",\n      columns: [{\n        title: 'Medical Name',\n        field: \"medical_name\"\n      }, {\n        title: 'Commercial Name',\n        field: \"commercial_name\"\n      }, {\n        title: 'Type',\n        field: 'medicine_type',\n        lookup: {\n          1: 'capsule',\n          2: 'tablet',\n          3: 'liquid'\n        }\n      }, {\n        title: 'Recommended Dosage',\n        field: \"recommended_dosage\"\n      }, {\n        title: 'Quantity Available',\n        field: \"quantity\"\n      }],\n      data: this.state.medicines,\n      actions: [{\n        icon: 'check',\n        tooltip: 'Fill',\n        onClick: (event, row) => {\n          const prescription = this.state.prescriptions[0];\n\n          if (row.quantity - prescription.quantity < 0) {\n            alert(\"There is not enough medicine in stock to fill this prescription\");\n          } else {\n            patchMedicine(row.medicine_id, {\n              quantity: row.quantity - prescription.quantity\n            });\n            patchPrescription(prescription.prescription_id, {\n              medicine_id: row.medicine_id,\n              order_status: PrescriptionStatus.Filled\n            }).then(_ => {\n              this.props.history.push(\"/verify-insurance-request/\" + prescription.prescription_id);\n            });\n          }\n        }\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    user: state.user\n  };\n};\n\nconst mapDispatch = {\n  app_login\n};\nexport default connect(mapState, mapDispatch)(FillPrescription);","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/prescriptions/fillPrescription.js"],"names":["React","connect","app_login","getPrescription","patchPrescription","Button","Container","Col","Row","MaterialTable","getPhysicians","PrescriptionStatus","getMedicines","patchMedicine","initState","prescription","FillPrescription","Component","state","medicines","changeForm","e","propName","target","name","propValue","value","setState","componentDidMount","prescription_id","props","match","params","error","prescriptions","then","filter","m","requires_prescription","render","tableRef","createRef","tableRef1","sorting","search","paging","editable","title","field","pageSize","lookup","icon","tooltip","onClick","event","row","quantity","alert","medicine_id","order_status","Filled","_","history","push","mapState","user","mapDispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nimport { getPrescription, patchPrescription } from './prescriptionsService';\nimport { Button, Container, Col, Row } from 'react-bootstrap';\nimport MaterialTable from 'material-table';\nimport { getPhysicians } from '../physicians/physiciansService';\nimport { PrescriptionStatus } from '../models/prescription';\nimport { getMedicines, patchMedicine } from '../medicines/medicinesService';\n\nconst initState = {\n    prescription: \"\"\n}\n\nexport class FillPrescription extends React.Component {\n\n    state = {\n        ...initState,\n        prescription: \"\",\n        medicines: []\n    }\n\n    changeForm = (e) => {\n        let propName = e.target.name;\n        let propValue = e.target.value;\n        let state = { ...this.state };\n        state[propName] = propValue;\n        this.setState(state);\n    }\n\n    async componentDidMount() {\n        const prescription_id = this.props.match.params.prescription;\n        const prescription = await getPrescription(prescription_id);\n        if (prescription.error) {\n            this.setState({ error: prescription.error });\n            return;\n        }\n        this.setState({ prescriptions: [prescription] })\n\n        getMedicines()\n            .then(medicines => {\n                medicines = medicines.filter(m => m.requires_prescription)\n                this.setState({ medicines: medicines })\n            })\n    }\n    render() {\n        const tableRef = React.createRef();\n        const tableRef1 = React.createRef();\n        return (\n            <Container fluid className=\"card card-body bg-light\">\n                <Row>\n                    <Col><h5>Fill Prescription <i class=\"fas fa-prescription-bottle-alt\"></i></h5></Col>\n                </Row>\n                <br />\n                <Row>\n                    <Col>\n                        <MaterialTable\n                            tableRef={tableRef}\n                            options={{\n                                sorting: false,\n                                search: false,\n                                paging: false,\n                                editable: false,\n                            }}\n                            title=\"Prescription\"\n                            columns={[\n                                { title: 'Description', field: \"prescription\" },\n                                { title: 'Dosage', field: 'dosage' },\n                                { title: 'Quantity', field: 'quantity' },\n                            ]}\n                            data={this.state.prescriptions}\n                        />\n                    </Col>\n                </Row>\n                <br></br>\n                <Row>\n                    <Col>\n                        <MaterialTable\n                            tableRef={tableRef1}\n                            options={{\n                                sorting: true,\n                                search: true,\n                                paging: true,\n                                editable: false,\n                                pageSize: 5,\n                            }}\n                            title=\"Medicine Stock\"\n                            columns={[\n                                { title: 'Medical Name', field: \"medical_name\" },\n                                { title: 'Commercial Name', field: \"commercial_name\" },\n                                { title: 'Type', field: 'medicine_type', lookup: { 1: 'capsule', 2: 'tablet', 3: 'liquid' }, },\n                                { title: 'Recommended Dosage', field: \"recommended_dosage\" },\n                                { title: 'Quantity Available', field: \"quantity\" },\n                            ]}\n                            data={this.state.medicines}\n                            actions={[\n                                {\n                                    icon: 'check',\n                                    tooltip: 'Fill',\n                                    onClick: (event, row) => {\n                                        const prescription = this.state.prescriptions[0];\n                                        if ((row.quantity - prescription.quantity) < 0) {\n                                            alert(\"There is not enough medicine in stock to fill this prescription\")\n                                        }\n                                        else {\n                                            patchMedicine(row.medicine_id, { quantity: row.quantity - prescription.quantity })\n                                            patchPrescription(prescription.prescription_id, { medicine_id: row.medicine_id, order_status: PrescriptionStatus.Filled }).then(_ => {\n                                                this.props.history.push(\"/verify-insurance-request/\" + prescription.prescription_id);\n                                            })\n                                        }\n                                    }\n                                },\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n\n}\n\nconst mapState = (state) => { return { user: state.user } };\nconst mapDispatch = { app_login };\n\nexport default connect(mapState, mapDispatch)(FillPrescription);"]},"metadata":{},"sourceType":"module"}