{"ast":null,"code":"var _jsxFileName = \"/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/patients/patientManager.js\";\nimport * as React from 'react';\nimport MaterialTable from 'material-table';\nimport TextField from '@material-ui/core/TextField';\nimport { createPatient, getPatients, patchPatient, deletePatient } from './patientsService';\nimport US_States from '../models/states';\nimport { Select, MenuItem } from '@material-ui/core';\nconst zipRegex = /^\\d{5}$|^\\d{5}-\\d{4}$/;\nexport default class PatientManager extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      patients: []\n    };\n\n    this.getData = () => {\n      return getPatients().then(patients => {\n        this.setState({\n          patients: patients\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const tableRef = React.createRef();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MaterialTable, {\n      tableRef: tableRef,\n      options: {\n        sorting: true,\n        search: true,\n        paging: false,\n        editable: true\n      },\n      title: \"Patients\",\n      columns: [{\n        title: 'First name',\n        field: 'first_name',\n        validate: u => u.first_name == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Last name',\n        field: 'last_name',\n        validate: u => u.last_name == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, // { title: 'Date of birth', field: 'birth_date', validate: u => u.birth_date == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n      {\n        title: 'Date of birth',\n        field: 'birth_date',\n        render: u => /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 42\n          }\n        }, new Date(Date.parse(u.birth_date.replace(/-/g, '\\/').replace(/T.+/, ''))).toLocaleDateString('en-US')),\n        editComponent: props => /*#__PURE__*/React.createElement(TextField, {\n          type: \"date\",\n          margin: \"normal\",\n          id: \"birth_date\",\n          label: \"Date of birth\",\n          value: props.value,\n          InputLabelProps: {\n            shrink: true\n          },\n          onChange: e => props.onChange(e.target.value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 33\n          }\n        })\n      }, {\n        title: 'Address',\n        field: 'address',\n        validate: u => u.address == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'City',\n        field: 'city',\n        validate: u => u.city == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'State',\n        field: 'state',\n        validate: u => u.state == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'State',\n        field: 'state',\n        render: u => /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 42\n          }\n        }, u.state),\n        editComponent: props => /*#__PURE__*/React.createElement(Select, {\n          id: \"state\",\n          value: props.value,\n          onChange: e => props.onChange(e.target.value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }\n        }, US_States.forEach(s => /*#__PURE__*/React.createElement(MenuItem, {\n          value: s.abbreviation,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 62\n          }\n        }, s.abbreviation)))\n      }, {\n        title: 'Zipcode',\n        field: 'zipcode',\n        validate: u => u.zipcode == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : !zipRegex.test(u.zipcode) ? {\n          isValid: false,\n          helperText: \"Invalid format (NNNNN, NNNNN-NNNN)\"\n        } : {\n          isValid: true\n        }\n      }],\n      data: this.state.patients,\n      editable: {\n        onRowUpdate: (newData, oldData) => {\n          return patchPatient(newData.patient_id, newData).then(_ => this.getData());\n        },\n        onRowAdd: newData => {\n          return createPatient(newData).then(_ => this.getData());\n        },\n        onRowDelete: oldData => {\n          return deletePatient(oldData.patient_id).then(_ => this.getData());\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/patients/patientManager.js"],"names":["React","MaterialTable","TextField","createPatient","getPatients","patchPatient","deletePatient","US_States","Select","MenuItem","zipRegex","PatientManager","Component","state","patients","getData","then","setState","componentDidMount","render","tableRef","createRef","sorting","search","paging","editable","title","field","validate","u","first_name","isValid","helperText","last_name","Date","parse","birth_date","replace","toLocaleDateString","editComponent","props","value","shrink","e","onChange","target","address","city","forEach","s","abbreviation","zipcode","test","onRowUpdate","newData","oldData","patient_id","_","onRowAdd","onRowDelete"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport MaterialTable from 'material-table';\nimport TextField from '@material-ui/core/TextField';\nimport { createPatient, getPatients, patchPatient, deletePatient } from './patientsService';\nimport US_States from '../models/states';\nimport { Select, MenuItem } from '@material-ui/core'\n\nconst zipRegex = /^\\d{5}$|^\\d{5}-\\d{4}$/;\n\nexport default class PatientManager extends React.Component {\n    state = {\n        patients: []\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    getData = () => {\n        return getPatients()\n            .then(patients => {\n                this.setState({ patients: patients })\n            })\n    }\n\n    render() {\n        const tableRef = React.createRef();\n        return (\n            <div>\n                <MaterialTable\n                    tableRef={tableRef}\n                    options={{\n                        sorting: true,\n                        search: true,\n                        paging: false,\n                        editable: true,\n                    }}\n                    title=\"Patients\"\n                    columns={[\n                        { title: 'First name', field: 'first_name', validate: u => u.first_name == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Last name', field: 'last_name', validate: u => u.last_name == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        // { title: 'Date of birth', field: 'birth_date', validate: u => u.birth_date == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        {\n                            title: 'Date of birth',\n                            field: 'birth_date',\n                            render: u => <span>{new Date(Date.parse(u.birth_date.replace(/-/g, '\\/').replace(/T.+/, ''))).toLocaleDateString('en-US')}</span>,\n                            editComponent: props => (\n                                <TextField\n                                    type=\"date\"\n                                    margin=\"normal\"\n                                    id=\"birth_date\"\n                                    label=\"Date of birth\"\n                                    value={props.value}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    onChange={e => props.onChange(e.target.value)} />),\n                        },\n                        { title: 'Address', field: 'address', validate: u => u.address == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'City', field: 'city', validate: u => u.city == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'State', field: 'state', validate: u => u.state == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        {\n                            title: 'State',\n                            field: 'state',\n                            render: u => <span>{u.state}</span>,\n                            editComponent: props => (\n                                <Select\n                                    id=\"state\"\n                                    value={props.value}\n                                    onChange={e => props.onChange(e.target.value)}\n                                >\n                                    {US_States.forEach(s => (<MenuItem value={s.abbreviation}>{s.abbreviation}</MenuItem>))}\n                                </Select>),\n                        },\n                        { title: 'Zipcode', field: 'zipcode', validate: u => u.zipcode == \"\" ? { isValid: false, helperText: \"required\" } : (!zipRegex.test(u.zipcode) ? { isValid: false, helperText: \"Invalid format (NNNNN, NNNNN-NNNN)\" } : { isValid: true }) },\n                    ]}\n                    data={this.state.patients}\n                    editable={{\n                        onRowUpdate: (newData, oldData) => {\n                            return patchPatient(newData.patient_id, newData).then(_ => this.getData())\n                        },\n                        onRowAdd: newData => {\n                            return createPatient(newData).then(_ => this.getData())\n                        },\n                        onRowDelete: oldData => {\n                            return deletePatient(oldData.patient_id).then(_ => this.getData())\n                        }\n                    }}\n                />\n            </div>\n\n        )\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}