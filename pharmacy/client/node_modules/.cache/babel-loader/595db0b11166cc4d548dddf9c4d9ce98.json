{"ast":null,"code":"var _jsxFileName = \"/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/prescriptions/verifyPatient.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nimport { getPrescription } from './prescriptionsService';\nimport { Button, Container, Col, Row } from 'react-bootstrap';\nimport MaterialTable from 'material-table';\nimport { getPatients } from '../patients/patientsService';\nconst initState = {\n  prescription: \"\"\n};\nexport class VerifyPatient extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...initState,\n      prescription: \"\",\n      patients: []\n    };\n\n    this.changeForm = e => {\n      let propName = e.target.name;\n      let propValue = e.target.value;\n      let state = { ...this.state\n      };\n      state[propName] = propValue;\n      this.setState(state);\n    };\n  }\n\n  async componentDidMount() {\n    const prescription_id = this.props.match.params.prescription;\n    const prescription = await getPrescription(prescription_id);\n\n    if (prescription.error) {\n      this.setState({\n        error: prescription.error\n      });\n      return;\n    }\n\n    this.setState({\n      prescriptions: [prescription]\n    });\n    getPatients().then(patients => {\n      this.setState({\n        patients: patients\n      });\n    });\n  }\n\n  render() {\n    const tableRef = React.createRef();\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MaterialTable, {\n      tableRef: tableRef,\n      options: {\n        editable: false\n      },\n      title: \"Patient on Prescription\",\n      columns: [{\n        title: 'Name',\n        render: p => `${p.patient_first_name} ${p.patient_last_name}`\n      }, {\n        title: 'Date of birth',\n        type: 'date',\n        field: 'patient_date_of_birth'\n      }, {\n        title: 'Address',\n        field: 'patient_address'\n      }],\n      data: [this.state.prescriptions],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(MaterialTable, {\n      tableRef: tableRef,\n      options: {\n        sorting: true,\n        search: true,\n        paging: true,\n        editable: false,\n        pageSize: 5\n      },\n      title: \"Find Patient\",\n      columns: [{\n        title: 'Name',\n        render: p => `${p.first_name} ${p.last_name}`\n      }, {\n        title: 'Date of birth',\n        type: 'date',\n        field: 'birth_date'\n      }, {\n        title: 'Address',\n        render: p => `${p.address} ${p.city} ${p.state} ${p.zipcode}`\n      }],\n      data: this.state.patients,\n      actions: [{\n        icon: 'check',\n        tooltip: 'Match',\n        onClick: (event, row) => {\n          this.setState({\n            patient: row\n          });\n        }\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    user: state.user\n  };\n};\n\nconst mapDispatch = {\n  app_login\n};\nexport default connect(mapState, mapDispatch)(VerifyPatient);","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/prescriptions/verifyPatient.js"],"names":["React","connect","app_login","getPrescription","Button","Container","Col","Row","MaterialTable","getPatients","initState","prescription","VerifyPatient","Component","state","patients","changeForm","e","propName","target","name","propValue","value","setState","componentDidMount","prescription_id","props","match","params","error","prescriptions","then","render","tableRef","createRef","editable","title","p","patient_first_name","patient_last_name","type","field","sorting","search","paging","pageSize","first_name","last_name","address","city","zipcode","icon","tooltip","onClick","event","row","patient","mapState","user","mapDispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nimport { getPrescription } from './prescriptionsService';\nimport { Button, Container, Col, Row } from 'react-bootstrap';\nimport MaterialTable from 'material-table';\nimport { getPatients } from '../patients/patientsService';\n\n\nconst initState = {\n    prescription: \"\"\n}\n\nexport class VerifyPatient extends React.Component {\n\n    state = {\n        ...initState,\n        prescription: \"\",\n        patients: []\n    }\n\n    changeForm = (e) => {\n        let propName = e.target.name;\n        let propValue = e.target.value;\n        let state = { ...this.state };\n        state[propName] = propValue;\n        this.setState(state);\n    }\n\n    async componentDidMount() {\n        const prescription_id = this.props.match.params.prescription;\n        const prescription = await getPrescription(prescription_id);\n        if (prescription.error) {\n            this.setState({ error: prescription.error });\n            return;\n        }\n        this.setState({ prescriptions: [prescription] })\n\n        getPatients()\n            .then(patients => {\n                this.setState({ patients: patients })\n            })\n    }\n    render() {\n        const tableRef = React.createRef();\n        return (\n            <Container>\n                <Row>\n                    <MaterialTable\n                        tableRef={tableRef}\n                        options={{\n                            editable: false,\n                        }}\n                        title=\"Patient on Prescription\"\n                        columns={[\n                            { title: 'Name', render: p => (`${p.patient_first_name} ${p.patient_last_name}`) },\n                            { title: 'Date of birth', type: 'date', field: 'patient_date_of_birth' },\n                            { title: 'Address', field: 'patient_address' },\n                        ]}\n                        data={[this.state.prescriptions]}\n                    />\n                </Row>\n                <hr></hr>\n                <Row>\n                    <Col>\n                        <MaterialTable\n                            tableRef={tableRef}\n                            options={{\n                                sorting: true,\n                                search: true,\n                                paging: true,\n                                editable: false,\n                                pageSize: 5,\n                            }}\n                            title=\"Find Patient\"\n                            columns={[\n                                { title: 'Name', render: p => (`${p.first_name} ${p.last_name}`) },\n                                { title: 'Date of birth', type: 'date', field: 'birth_date' },\n                                { title: 'Address', render: p => (`${p.address} ${p.city} ${p.state} ${p.zipcode}`) },\n                            ]}\n                            data={this.state.patients}\n                            actions={[\n                                {\n                                    icon: 'check',\n                                    tooltip: 'Match',\n                                    onClick: (event, row) => {\n                                        this.setState({ patient: row });\n                                    }\n                                },\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n\n}\n\nconst mapState = (state) => { return { user: state.user } };\nconst mapDispatch = { app_login };\n\nexport default connect(mapState, mapDispatch)(VerifyPatient);"]},"metadata":{},"sourceType":"module"}