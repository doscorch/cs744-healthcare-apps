{"ast":null,"code":"var _jsxFileName = \"/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/prescriptions/verifyPatient.js\";\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nimport { getPrescription } from './prescriptionsService';\nimport Icon from '@material-ui/core/Icon';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport Alert from '@material-ui/lab/Alert';\nimport { Button } from 'bootstrap';\nconst initState = {\n  prescription: \"\"\n};\nexport class VerifyPatient extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...initState,\n      prescription: \"\",\n      error: \"\",\n      success: \"\"\n    };\n\n    this.changeForm = e => {\n      let propName = e.target.name;\n      let propValue = e.target.value;\n      let state = { ...this.state\n      };\n      state[propName] = propValue;\n      this.setState(state);\n    };\n  }\n\n  async componentDidMount() {\n    const prescription_id = this.props.match.params.prescription;\n    const prescription = await getPrescription(prescription_id);\n\n    if (prescription.error) {\n      this.setState({\n        error: prescription.error\n      });\n      return;\n    }\n\n    let state = { ...this.state\n    };\n    state['prescription'] = prescription;\n    this.setState(state);\n  }\n\n  render() {\n    let error = this.state.error ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 40\n      }\n    }, this.state.error) : \"\";\n    let success = this.state.success ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 44\n      }\n    }, this.state.success) : \"\";\n    const prescription = this.state.prescription;\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"card card-body bg-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 26\n      }\n    }, \"Patient Name\")), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }\n    }, prescription.patient_first_name, \" \", prescription.patient_last_name), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, prescription.patient_first_name, \" \", prescription.patient_last_name)), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 26\n      }\n    }, \"Date of Birth\")), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, prescription.patient_date_of_birth), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, prescription.patient_date_of_birth)), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 26\n      }\n    }, \"Address\")), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, prescription.patient_first_name), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, prescription.patient_first_name)), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 26\n      }\n    }, \"Address\")), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, prescription.patient_address, \" \", prescription.patient_address), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, prescription.patient_address, \" \", prescription.patient_address)), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }\n    }, \"Verify\"))));\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    user: state.user\n  };\n};\n\nconst mapDispatch = {\n  app_login\n};\nexport default connect(mapState, mapDispatch)(VerifyPatient);","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/prescriptions/verifyPatient.js"],"names":["React","Typography","connect","app_login","getPrescription","Icon","Container","Col","Row","Alert","Button","initState","prescription","VerifyPatient","Component","state","error","success","changeForm","e","propName","target","name","propValue","value","setState","componentDidMount","prescription_id","props","match","params","render","patient_first_name","patient_last_name","patient_date_of_birth","patient_address","mapState","user","mapDispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nimport { getPrescription } from './prescriptionsService';\nimport Icon from '@material-ui/core/Icon';\nimport { Container, Col, Row } from 'react-bootstrap';\nimport Alert from '@material-ui/lab/Alert';\nimport { Button } from 'bootstrap';\n\nconst initState = {\n    prescription: \"\"\n}\n\nexport class VerifyPatient extends React.Component {\n\n    state = {\n        ...initState,\n        prescription: \"\",\n        error: \"\",\n        success: \"\"\n    }\n\n    changeForm = (e) => {\n        let propName = e.target.name;\n        let propValue = e.target.value;\n        let state = { ...this.state };\n        state[propName] = propValue;\n        this.setState(state);\n    }\n\n    async componentDidMount() {\n        const prescription_id = this.props.match.params.prescription;\n        const prescription = await getPrescription(prescription_id);\n        if (prescription.error) {\n            this.setState({ error: prescription.error });\n            return;\n        }\n        let state = { ...this.state };\n        state['prescription'] = prescription;\n        this.setState(state);\n    }\n    render() {\n        let error = this.state.error ? <Alert severity=\"error\">{this.state.error}</Alert> : \"\";\n        let success = this.state.success ? <Alert severity=\"success\">{this.state.success}</Alert> : \"\";\n        const prescription = this.state.prescription;\n        return (\n            <Container className=\"card card-body bg-light\">\n                <Row>\n                    <Col><h5>Patient Name</h5></Col>\n                    <Col>{prescription.patient_first_name} {prescription.patient_last_name}</Col>\n                    <Col>{prescription.patient_first_name} {prescription.patient_last_name}</Col>\n                </Row>\n                <Row>\n                    <Col><h5>Date of Birth</h5></Col>\n                    <Col>{prescription.patient_date_of_birth}</Col>\n                    <Col>{prescription.patient_date_of_birth}</Col>\n                </Row>\n                <Row>\n                    <Col><h5>Address</h5></Col>\n                    <Col>{prescription.patient_first_name}</Col>\n                    <Col>{prescription.patient_first_name}</Col>\n                </Row>\n                <Row>\n                    <Col><h5>Address</h5></Col>\n                    <Col>{prescription.patient_address} {prescription.patient_address}</Col>\n                    <Col>{prescription.patient_address} {prescription.patient_address}</Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Button>Verify</Button>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n\n}\n\nconst mapState = (state) => { return { user: state.user } };\nconst mapDispatch = { app_login };\n\nexport default connect(mapState, mapDispatch)(VerifyPatient);"]},"metadata":{},"sourceType":"module"}