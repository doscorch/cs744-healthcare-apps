{"ast":null,"code":"var _classCallCheck = require(\"/home/diedrick.nathan/cs744-healthcare-apps/healthcare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/diedrick.nathan/cs744-healthcare-apps/healthcare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/diedrick.nathan/cs744-healthcare-apps/healthcare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/diedrick.nathan/cs744-healthcare-apps/healthcare/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Base = require('./base');\n\nvar JQueryService = /*#__PURE__*/function (_Base) {\n  \"use strict\";\n\n  _inherits(JQueryService, _Base);\n\n  var _super = _createSuper(JQueryService);\n\n  function JQueryService() {\n    _classCallCheck(this, JQueryService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(JQueryService, [{\n    key: \"request\",\n    value: function request(options, params) {\n      var _this = this;\n\n      var _params$connection = params.connection,\n          connection = _params$connection === void 0 ? {} : _params$connection;\n      var headers = Object.assign({}, options.headers, this.options.headers, connection.headers);\n      var opts = Object.assign({\n        dataType: options.type || 'json'\n      }, connection, options, {\n        headers: headers\n      });\n\n      if (options.body) {\n        opts.data = JSON.stringify(options.body);\n        opts.contentType = 'application/json';\n      }\n\n      delete opts.type;\n      delete opts.body;\n      return new Promise(function (resolve, reject) {\n        _this.connection.ajax(opts).then(resolve, function (xhr) {\n          var error = xhr.responseText;\n\n          try {\n            error = JSON.parse(error);\n          } catch (e) {\n            error = new Error(xhr.responseText);\n          }\n\n          error.xhr = error.response = xhr;\n          reject(error);\n        });\n      });\n    }\n  }]);\n\n  return JQueryService;\n}(Base);\n\nmodule.exports = JQueryService;","map":{"version":3,"sources":["/home/diedrick.nathan/cs744-healthcare-apps/healthcare/client/node_modules/@feathersjs/rest-client/lib/jquery.js"],"names":["Base","require","JQueryService","options","params","connection","headers","Object","assign","opts","dataType","type","body","data","JSON","stringify","contentType","Promise","resolve","reject","ajax","then","xhr","error","responseText","parse","e","Error","response","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;IAEMC,a;;;;;;;;;;;;;;;4BACKC,O,EAASC,M,EAAQ;AAAA;;AAAA,+BACIA,MADJ,CAChBC,UADgB;AAAA,UAChBA,UADgB,mCACH,EADG;AAExB,UAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,OAAO,CAACG,OAA1B,EAAmC,KAAKH,OAAL,CAAaG,OAAhD,EAAyDD,UAAU,CAACC,OAApE,CAAhB;AACA,UAAMG,IAAI,GAAGF,MAAM,CAACC,MAAP,CAAc;AACzBE,QAAAA,QAAQ,EAAEP,OAAO,CAACQ,IAAR,IAAgB;AADD,OAAd,EAEVN,UAFU,EAEEF,OAFF,EAEW;AAAEG,QAAAA,OAAO,EAAPA;AAAF,OAFX,CAAb;;AAIA,UAAIH,OAAO,CAACS,IAAZ,EAAkB;AAChBH,QAAAA,IAAI,CAACI,IAAL,GAAYC,IAAI,CAACC,SAAL,CAAeZ,OAAO,CAACS,IAAvB,CAAZ;AACAH,QAAAA,IAAI,CAACO,WAAL,GAAmB,kBAAnB;AACD;;AAED,aAAOP,IAAI,CAACE,IAAZ;AACA,aAAOF,IAAI,CAACG,IAAZ;AAEA,aAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAA,KAAI,CAACd,UAAL,CAAgBe,IAAhB,CAAqBX,IAArB,EAA2BY,IAA3B,CAAgCH,OAAhC,EAAyC,UAAAI,GAAG,EAAI;AAC9C,cAAIC,KAAK,GAAGD,GAAG,CAACE,YAAhB;;AAEA,cAAI;AACFD,YAAAA,KAAK,GAAGT,IAAI,CAACW,KAAL,CAAWF,KAAX,CAAR;AACD,WAFD,CAEE,OAAOG,CAAP,EAAU;AACVH,YAAAA,KAAK,GAAG,IAAII,KAAJ,CAAUL,GAAG,CAACE,YAAd,CAAR;AACD;;AAEDD,UAAAA,KAAK,CAACD,GAAN,GAAYC,KAAK,CAACK,QAAN,GAAiBN,GAA7B;AAEAH,UAAAA,MAAM,CAACI,KAAD,CAAN;AACD,SAZD;AAaD,OAdM,CAAP;AAeD;;;;EA/ByBvB,I;;AAkC5B6B,MAAM,CAACC,OAAP,GAAiB5B,aAAjB","sourcesContent":["const Base = require('./base');\n\nclass JQueryService extends Base {\n  request (options, params) {\n    const { connection = {} } = params;\n    const headers = Object.assign({}, options.headers, this.options.headers, connection.headers);\n    const opts = Object.assign({\n      dataType: options.type || 'json'\n    }, connection, options, { headers });\n\n    if (options.body) {\n      opts.data = JSON.stringify(options.body);\n      opts.contentType = 'application/json';\n    }\n\n    delete opts.type;\n    delete opts.body;\n\n    return new Promise((resolve, reject) => {\n      this.connection.ajax(opts).then(resolve, xhr => {\n        let error = xhr.responseText;\n\n        try {\n          error = JSON.parse(error);\n        } catch (e) {\n          error = new Error(xhr.responseText);\n        }\n\n        error.xhr = error.response = xhr;\n\n        reject(error);\n      });\n    });\n  }\n}\n\nmodule.exports = JQueryService;\n"]},"metadata":{},"sourceType":"script"}