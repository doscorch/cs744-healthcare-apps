{"ast":null,"code":"const Base = require('./base');\n\nclass JQueryService extends Base {\n  request(options, params) {\n    const {\n      connection = {}\n    } = params;\n    const headers = Object.assign({}, options.headers, this.options.headers, connection.headers);\n    const opts = Object.assign({\n      dataType: options.type || 'json'\n    }, connection, options, {\n      headers\n    });\n\n    if (options.body) {\n      opts.data = JSON.stringify(options.body);\n      opts.contentType = 'application/json';\n    }\n\n    delete opts.type;\n    delete opts.body;\n    return new Promise((resolve, reject) => {\n      this.connection.ajax(opts).then(resolve, xhr => {\n        let error = xhr.responseText;\n\n        try {\n          error = JSON.parse(error);\n        } catch (e) {\n          error = new Error(xhr.responseText);\n        }\n\n        error.xhr = error.response = xhr;\n        reject(error);\n      });\n    });\n  }\n\n}\n\nmodule.exports = JQueryService;","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/healthcare/client/node_modules/@feathersjs/rest-client/lib/jquery.js"],"names":["Base","require","JQueryService","request","options","params","connection","headers","Object","assign","opts","dataType","type","body","data","JSON","stringify","contentType","Promise","resolve","reject","ajax","then","xhr","error","responseText","parse","e","Error","response","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAMC,aAAN,SAA4BF,IAA5B,CAAiC;AAC/BG,EAAAA,OAAO,CAAEC,OAAF,EAAWC,MAAX,EAAmB;AACxB,UAAM;AAAEC,MAAAA,UAAU,GAAG;AAAf,QAAsBD,MAA5B;AACA,UAAME,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,OAAO,CAACG,OAA1B,EAAmC,KAAKH,OAAL,CAAaG,OAAhD,EAAyDD,UAAU,CAACC,OAApE,CAAhB;AACA,UAAMG,IAAI,GAAGF,MAAM,CAACC,MAAP,CAAc;AACzBE,MAAAA,QAAQ,EAAEP,OAAO,CAACQ,IAAR,IAAgB;AADD,KAAd,EAEVN,UAFU,EAEEF,OAFF,EAEW;AAAEG,MAAAA;AAAF,KAFX,CAAb;;AAIA,QAAIH,OAAO,CAACS,IAAZ,EAAkB;AAChBH,MAAAA,IAAI,CAACI,IAAL,GAAYC,IAAI,CAACC,SAAL,CAAeZ,OAAO,CAACS,IAAvB,CAAZ;AACAH,MAAAA,IAAI,CAACO,WAAL,GAAmB,kBAAnB;AACD;;AAED,WAAOP,IAAI,CAACE,IAAZ;AACA,WAAOF,IAAI,CAACG,IAAZ;AAEA,WAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKd,UAAL,CAAgBe,IAAhB,CAAqBX,IAArB,EAA2BY,IAA3B,CAAgCH,OAAhC,EAAyCI,GAAG,IAAI;AAC9C,YAAIC,KAAK,GAAGD,GAAG,CAACE,YAAhB;;AAEA,YAAI;AACFD,UAAAA,KAAK,GAAGT,IAAI,CAACW,KAAL,CAAWF,KAAX,CAAR;AACD,SAFD,CAEE,OAAOG,CAAP,EAAU;AACVH,UAAAA,KAAK,GAAG,IAAII,KAAJ,CAAUL,GAAG,CAACE,YAAd,CAAR;AACD;;AAEDD,QAAAA,KAAK,CAACD,GAAN,GAAYC,KAAK,CAACK,QAAN,GAAiBN,GAA7B;AAEAH,QAAAA,MAAM,CAACI,KAAD,CAAN;AACD,OAZD;AAaD,KAdM,CAAP;AAeD;;AA/B8B;;AAkCjCM,MAAM,CAACC,OAAP,GAAiB7B,aAAjB","sourcesContent":["const Base = require('./base');\n\nclass JQueryService extends Base {\n  request (options, params) {\n    const { connection = {} } = params;\n    const headers = Object.assign({}, options.headers, this.options.headers, connection.headers);\n    const opts = Object.assign({\n      dataType: options.type || 'json'\n    }, connection, options, { headers });\n\n    if (options.body) {\n      opts.data = JSON.stringify(options.body);\n      opts.contentType = 'application/json';\n    }\n\n    delete opts.type;\n    delete opts.body;\n\n    return new Promise((resolve, reject) => {\n      this.connection.ajax(opts).then(resolve, xhr => {\n        let error = xhr.responseText;\n\n        try {\n          error = JSON.parse(error);\n        } catch (e) {\n          error = new Error(xhr.responseText);\n        }\n\n        error.xhr = error.response = xhr;\n\n        reject(error);\n      });\n    });\n  }\n}\n\nmodule.exports = JQueryService;\n"]},"metadata":{},"sourceType":"script"}