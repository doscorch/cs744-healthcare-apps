{"ast":null,"code":"import { ERROR } from \"../errorHandling\";\nimport client from \"../serviceClient/apiClient\";\nconst users = {}; // call api to register user\n\nexport const registerUser = async (username, password, firstName, lastName, user_type, security_answer_1, security_answer_2, security_answer_3, security_question_1, security_question_2, security_question_3) => {\n  let args = {\n    username,\n    password,\n    firstName,\n    lastName,\n    user_type,\n    security_question_1,\n    security_answer_1,\n    security_question_2,\n    security_answer_2,\n    security_question_3,\n    security_answer_3\n  };\n  return client.post('/auth/register', args).then(res => {\n    return {\n      msg: res.msg\n    };\n  });\n};\nexport const updatePassword = async (username, password) => {\n  let args = {\n    username,\n    password\n  };\n  return client.post('/auth/updatePassword', args).then(res => {\n    return {\n      msg: res.msg\n    };\n  });\n};\nexport const updateSecurityQuestions = async (username, security_question_1, security_answer_1, security_question_2, security_answer_2, security_question_3, security_answer_3) => {\n  let args = {\n    username,\n    security_question_1,\n    security_answer_1,\n    security_question_2,\n    security_answer_2,\n    security_question_3,\n    security_answer_3\n  };\n  return client.post('/auth/updateSecurityQuestions', args).then(res => {\n    return {\n      msg: res.msg\n    };\n  });\n};\n/**\n * Gets all security questions\n */\n\nexport const getAllSecurityQuestions = async () => {\n  return client.get('/auth/getSecurityQuestions').then(res => {\n    return {\n      data: res.data\n    };\n  });\n}; // call api to get users\n\nexport const getUsers = async () => {\n  return client.get('/users').then(users => {\n    return users;\n  });\n};\nexport const getQuestions = async user => {\n  const response = await client.get('/auth/questions/' + user.user_id);\n  return response.questions;\n}; //call api to check security question answer\n\nexport const answerSecurityQuestion = async (user, answer) => {\n  let response = client.post('/auth/answerquestion', {\n    user: user,\n    answer: answer\n  });\n  return response;\n}; // call api to register user by username\n\nexport const getUser = async username => {\n  client.get(`/users/${username}`).then(user => {\n    return user;\n  });\n  return users.find({\n    query: {\n      username: username\n    }\n  }).then(u => u.data.length ? u.data[0] : undefined);\n}; // call api to update user\n\nexport const updateUser = async user => {// await users.update(user._id, user, {});\n}; // call api to patch user\n\nexport const patchUser = async (userId, userPartial) => {\n  return await client.patch(`/users/${userId}`, userPartial);\n}; // call api to login user\n\nexport const loginUser = async (username, password) => {\n  try {\n    if (!username && !password) {\n      var _auth$user, _auth$user2;\n\n      let auth = await client.reAuthenticate();\n      return {\n        userId: (_auth$user = auth.user) === null || _auth$user === void 0 ? void 0 : _auth$user._id,\n        username: (_auth$user2 = auth.user) === null || _auth$user2 === void 0 ? void 0 : _auth$user2.username,\n        error: false\n      };\n    } else {\n      return client.post('/auth/login', {\n        username,\n        password\n      }).then(res => {\n        return {\n          user: res.data,\n          msg: res.msg\n        };\n      });\n    }\n  } catch (error) {\n    var _error$message;\n\n    let message = (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : ERROR;\n    return {\n      error: message\n    };\n  }\n}; // logout user on client\n\nexport const logout = async () => {\n  return await client.post('/auth/logout');\n};","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/auth/usersService.js"],"names":["ERROR","client","users","registerUser","username","password","firstName","lastName","user_type","security_answer_1","security_answer_2","security_answer_3","security_question_1","security_question_2","security_question_3","args","post","then","res","msg","updatePassword","updateSecurityQuestions","getAllSecurityQuestions","get","data","getUsers","getQuestions","user","response","user_id","questions","answerSecurityQuestion","answer","getUser","find","query","u","length","undefined","updateUser","patchUser","userId","userPartial","patch","loginUser","auth","reAuthenticate","_id","error","message","logout"],"mappings":"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","sourcesContent":["\nimport { ERROR } from \"../errorHandling\";\nimport client from \"../serviceClient/apiClient\";\n\nconst users = {};\n// call api to register user\n\nexport const registerUser = async (username, password, firstName, lastName,\n    user_type, security_answer_1, security_answer_2, security_answer_3,\n    security_question_1, security_question_2, security_question_3) => {\n    let args = {\n        username,\n        password,\n        firstName,\n        lastName,\n        user_type,\n\n        security_question_1,\n        security_answer_1,\n        security_question_2,\n        security_answer_2,\n        security_question_3,\n        security_answer_3,\n    };\n\n    return client.post('/auth/register', args).then(res => {\n        return {\n            msg: res.msg,\n        };\n    });\n}\n\nexport const updatePassword = async (username, password) => {\n    let args = { username, password };\n    return client.post('/auth/updatePassword', args).then(res => {\n        return {\n            msg: res.msg,\n        };\n    });\n}\n\nexport const updateSecurityQuestions = async (username, security_question_1, security_answer_1,\n    security_question_2, security_answer_2, security_question_3, security_answer_3) => {\n    let args = {\n        username, security_question_1, security_answer_1,\n        security_question_2, security_answer_2, security_question_3, security_answer_3\n    };\n    return client.post('/auth/updateSecurityQuestions', args).then(res => {\n        return {\n            msg: res.msg,\n        }\n    });\n}\n\n/**\n * Gets all security questions\n */\nexport const getAllSecurityQuestions = async () => {\n    return client.get('/auth/getSecurityQuestions').then(res => {\n        return {\n            data: res.data\n        };\n    });\n}\n\n// call api to get users\nexport const getUsers = async () => {\n    return client.get('/users').then(users => {\n        return users;\n    })\n}\n\nexport const getQuestions = async (user) => {\n    const response = await client.get('/auth/questions/' + user.user_id);\n    return response.questions;\n}\n\n//call api to check security question answer\nexport const answerSecurityQuestion = async (user, answer) => {\n    let response = client.post('/auth/answerquestion',\n        {\n            user: user,\n            answer: answer\n        });\n    return response;\n}\n\n// call api to register user by username\nexport const getUser = async (username) => {\n    client.get(`/users/${username}`).then(user => {\n        return user;\n    })\n    return users.find({\n        query: {\n            username: username\n        }\n    }).then(u => u.data.length ? u.data[0] : undefined)\n}\n\n// call api to update user\nexport const updateUser = async (user) => {\n    // await users.update(user._id, user, {});\n}\n\n// call api to patch user\nexport const patchUser = async (userId, userPartial) => {\n    return await client.patch(`/users/${userId}`, userPartial);\n}\n\n// call api to login user\nexport const loginUser = async (username, password) => {\n    try {\n        if (!username && !password) {\n            let auth = await client.reAuthenticate();\n            return {\n                userId: auth.user?._id,\n                username: auth.user?.username,\n                error: false,\n            }\n        } else {\n            return client.post('/auth/login', { username, password }).then(res => {\n                return {\n                    user: res.data,\n                    msg: res.msg,\n                }\n            })\n        }\n    } catch (error) {\n        let message = error?.message ?? ERROR;\n        return {\n            error: message,\n        };\n    }\n}\n\n// logout user on client\nexport const logout = async () => {\n    return await client.post('/auth/logout');\n}\n\n"]},"metadata":{},"sourceType":"module"}