{"ast":null,"code":"var _jsxFileName = \"/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/medicines/medicineManager.js\";\nimport * as React from 'react';\nimport MaterialTable from 'material-table';\nimport TextField from '@material-ui/core/TextField';\nimport { createMedicine, getMedicines, patchMedicine, deleteMedicine } from './medicinesService';\nimport { Select, MenuItem } from '@material-ui/core';\nconst zipRegex = /^\\d{5}$|^\\d{5}-\\d{4}$/;\nexport default class MedicineManager extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      medicines: []\n    };\n\n    this.getData = () => {\n      return getMedicines().then(medicines => {\n        this.setState({\n          medicines: medicines\n        });\n      });\n    };\n\n    this.generateCode = () => {\n      var result = '';\n\n      while (result == '' || this.state.medicines.some(m => m.medicine_code == result)) {\n        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        const numbers = '0123456789';\n\n        for (var i = 0; i < 3; i++) {\n          result += characters.charAt(Math.floor(Math.random() * characters.length));\n        }\n\n        for (var i = 0; i < 5; i++) {\n          result += numbers.charAt(Math.floor(Math.random() * numbers.length));\n        }\n      }\n\n      return result;\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const tableRef = React.createRef();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MaterialTable, {\n      tableRef: tableRef,\n      options: {\n        sorting: true,\n        search: true,\n        paging: false,\n        editable: true\n      },\n      title: \"Medicines\",\n      columns: [// { title: 'Medicine Code', field: 'medicine_code', validate: u => u.medicine_code == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n      {\n        title: 'Medicine Code',\n        field: 'medicine_code',\n        render: u => /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 42\n          }\n        }, u.medicine_code),\n        validate: u => u.medicine_code == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        },\n        editComponent: props => /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 37\n          }\n        }, props.value), /*#__PURE__*/React.createElement(\"button\", {\n          className: \"btn btn-sm btn-default\",\n          onClick: e => props.onChange(this.generateCode()),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"fas fa-sync\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 131\n          }\n        })))\n      }, {\n        title: 'Medical Name',\n        field: 'medical_name',\n        validate: u => u.medical_name == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Commercial Name',\n        field: 'commercial_name',\n        validate: u => u.commercial_name == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Type',\n        field: 'medicine_type',\n        validate: u => u.medicine_type == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        },\n        lookup: {\n          1: 'capsule',\n          2: 'tablet',\n          3: 'liquid'\n        }\n      }, {\n        title: 'Recommended Dosage',\n        field: 'recommended_dosage',\n        validate: u => u.recommended_dosage == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Cost',\n        field: 'cost',\n        type: \"number\",\n        step: \"0.01\",\n        validate: u => u.cost == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Quantity',\n        field: 'quantity',\n        type: 'numeric',\n        validate: u => u.quantity == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Vendor',\n        field: 'vendor',\n        validate: u => u.vendor == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Expiration Date',\n        field: 'expiration_date',\n        type: 'date',\n        validate: u => u.expiration_date == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }],\n      data: this.state.medicines,\n      editable: {\n        onRowUpdate: (newData, oldData) => {\n          return patchMedicine(newData.medicine_id, newData).then(_ => this.getData());\n        },\n        onRowAdd: newData => {\n          return createMedicine(newData).then(_ => this.getData());\n        },\n        onRowDelete: oldData => {\n          return deleteMedicine(oldData.medicine_id).then(_ => this.getData());\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/medicines/medicineManager.js"],"names":["React","MaterialTable","TextField","createMedicine","getMedicines","patchMedicine","deleteMedicine","Select","MenuItem","zipRegex","MedicineManager","Component","state","medicines","getData","then","setState","generateCode","result","some","m","medicine_code","characters","numbers","i","charAt","Math","floor","random","length","componentDidMount","render","tableRef","createRef","sorting","search","paging","editable","title","field","u","validate","isValid","helperText","editComponent","props","value","e","onChange","medical_name","commercial_name","medicine_type","lookup","recommended_dosage","type","step","cost","quantity","vendor","expiration_date","onRowUpdate","newData","oldData","medicine_id","_","onRowAdd","onRowDelete"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport MaterialTable from 'material-table';\nimport TextField from '@material-ui/core/TextField';\nimport { createMedicine, getMedicines, patchMedicine, deleteMedicine } from './medicinesService';\nimport { Select, MenuItem } from '@material-ui/core'\n\nconst zipRegex = /^\\d{5}$|^\\d{5}-\\d{4}$/;\n\nexport default class MedicineManager extends React.Component {\n    state = {\n        medicines: []\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    getData = () => {\n        return getMedicines()\n            .then(medicines => {\n                this.setState({ medicines: medicines })\n            })\n    }\n\n    generateCode = () => {\n        var result = '';\n        while (result == '' || this.state.medicines.some(m => m.medicine_code == result)) {\n            const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            const numbers = '0123456789'\n            for (var i = 0; i < 3; i++) {\n                result += characters.charAt(Math.floor(Math.random() * characters.length));\n            }\n            for (var i = 0; i < 5; i++) {\n                result += numbers.charAt(Math.floor(Math.random() * numbers.length));\n            }\n        }\n\n        return result;\n    }\n\n    render() {\n        const tableRef = React.createRef();\n        return (\n            <div>\n                <MaterialTable\n                    tableRef={tableRef}\n                    options={{\n                        sorting: true,\n                        search: true,\n                        paging: false,\n                        editable: true,\n                    }}\n                    title=\"Medicines\"\n                    columns={[\n                        // { title: 'Medicine Code', field: 'medicine_code', validate: u => u.medicine_code == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        {\n                            title: 'Medicine Code',\n                            field: 'medicine_code',\n                            render: u => <span>{u.medicine_code}</span>,\n                            validate: u => u.medicine_code == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true },\n                            editComponent: props => (\n                                <div>\n                                    <span>{props.value}</span>\n                                    <button className=\"btn btn-sm btn-default\" onClick={e => props.onChange(this.generateCode())}><i className=\"fas fa-sync\"></i></button>\n                                </div>),\n                        },\n                        { title: 'Medical Name', field: 'medical_name', validate: u => u.medical_name == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Commercial Name', field: 'commercial_name', validate: u => u.commercial_name == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Type', field: 'medicine_type', validate: u => u.medicine_type == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true }, lookup: { 1: 'capsule', 2: 'tablet', 3: 'liquid' }, },\n                        { title: 'Recommended Dosage', field: 'recommended_dosage', validate: u => u.recommended_dosage == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Cost', field: 'cost', type: \"number\", step: \"0.01\", validate: u => u.cost == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Quantity', field: 'quantity', type: 'numeric', validate: u => u.quantity == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Vendor', field: 'vendor', validate: u => u.vendor == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Expiration Date', field: 'expiration_date', type: 'date', validate: u => u.expiration_date == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                    ]}\n                    data={this.state.medicines}\n                    editable={{\n                        onRowUpdate: (newData, oldData) => {\n                            return patchMedicine(newData.medicine_id, newData).then(_ => this.getData())\n                        },\n                        onRowAdd: newData => {\n                            return createMedicine(newData).then(_ => this.getData())\n                        },\n                        onRowDelete: oldData => {\n                            return deleteMedicine(oldData.medicine_id).then(_ => this.getData())\n                        }\n                    }}\n                />\n            </div>\n\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}