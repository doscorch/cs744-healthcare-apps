{"ast":null,"code":"var _jsxFileName = \"/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/prescriptions/verifyPatient.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nimport { getPrescription, patchPrescription } from './prescriptionsService';\nimport { Button, Container, Col, Row } from 'react-bootstrap';\nimport MaterialTable from 'material-table';\nimport { getPatients } from '../patients/patientsService';\nimport { PrescriptionStatus } from '../models/prescription';\nconst initState = {\n  prescriptions: []\n};\nexport class VerifyPatient extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...initState,\n      prescriptions: [],\n      patients: []\n    };\n\n    this.changeForm = e => {\n      let propName = e.target.name;\n      let propValue = e.target.value;\n      let state = { ...this.state\n      };\n      state[propName] = propValue;\n      this.setState(state);\n    };\n  }\n\n  async componentDidMount() {\n    const prescription_id = this.props.match.params.prescription;\n    const prescription = await getPrescription(prescription_id);\n\n    if (prescription.error) {\n      this.setState({\n        error: prescription.error\n      });\n      return;\n    }\n\n    this.setState({\n      prescriptions: [prescription]\n    });\n    getPatients().then(patients => {\n      this.setState({\n        patients: patients\n      });\n    });\n  }\n\n  render() {\n    const tableRef = React.createRef();\n    const tableRef1 = React.createRef();\n    const prescription = this.state.prescriptions.length ? this.state.prescriptions[0] : {};\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(MaterialTable, {\n      tableRef: tableRef,\n      options: {\n        sorting: false,\n        search: false,\n        paging: false,\n        editable: false\n      },\n      title: \"Patient on Prescription\",\n      columns: [{\n        title: 'Name',\n        render: p => `${p.patient_first_name} ${p.patient_last_name}`\n      }, {\n        title: 'Date of birth',\n        type: 'date',\n        field: 'patient_date_of_birth'\n      }, {\n        title: 'Address',\n        field: 'patient_address'\n      }],\n      data: this.state.prescriptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(MaterialTable, {\n      tableRef: tableRef1,\n      options: {\n        sorting: true,\n        search: true,\n        paging: true,\n        editable: false,\n        pageSize: 5\n      },\n      title: \"Find Patient in System\",\n      columns: [{\n        title: 'Name',\n        render: p => `${p.first_name} ${p.last_name}`\n      }, {\n        title: 'Date of birth',\n        type: 'date',\n        field: 'birth_date'\n      }, {\n        title: 'Address',\n        render: p => `${p.address} ${p.city} ${p.state} ${p.zipcode}`\n      }],\n      data: this.state.patients,\n      actions: [{\n        icon: 'check',\n        tooltip: 'Match',\n        onClick: (event, row) => {\n          patchPrescription(prescription.prescription_id, {\n            patient_id: row.patient_id,\n            status: PrescriptionStatus.Verified_Patient\n          }).then(_ => {\n            this.props.history.push(\"/verify-physician/\" + prescription.prescription_id);\n          });\n        }\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    user: state.user\n  };\n};\n\nconst mapDispatch = {\n  app_login\n};\nexport default connect(mapState, mapDispatch)(VerifyPatient);","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/prescriptions/verifyPatient.js"],"names":["React","connect","app_login","getPrescription","patchPrescription","Button","Container","Col","Row","MaterialTable","getPatients","PrescriptionStatus","initState","prescriptions","VerifyPatient","Component","state","patients","changeForm","e","propName","target","name","propValue","value","setState","componentDidMount","prescription_id","props","match","params","prescription","error","then","render","tableRef","createRef","tableRef1","length","sorting","search","paging","editable","title","p","patient_first_name","patient_last_name","type","field","pageSize","first_name","last_name","address","city","zipcode","icon","tooltip","onClick","event","row","patient_id","status","Verified_Patient","_","history","push","mapState","user","mapDispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nimport { getPrescription, patchPrescription } from './prescriptionsService';\nimport { Button, Container, Col, Row } from 'react-bootstrap';\nimport MaterialTable from 'material-table';\nimport { getPatients } from '../patients/patientsService';\nimport { PrescriptionStatus } from '../models/prescription';\n\n\nconst initState = {\n    prescriptions: []\n}\n\nexport class VerifyPatient extends React.Component {\n\n    state = {\n        ...initState,\n        prescriptions: [],\n        patients: []\n    }\n\n    changeForm = (e) => {\n        let propName = e.target.name;\n        let propValue = e.target.value;\n        let state = { ...this.state };\n        state[propName] = propValue;\n        this.setState(state);\n    }\n\n    async componentDidMount() {\n        const prescription_id = this.props.match.params.prescription;\n        const prescription = await getPrescription(prescription_id);\n        if (prescription.error) {\n            this.setState({ error: prescription.error });\n            return;\n        }\n        this.setState({ prescriptions: [prescription] })\n\n        getPatients()\n            .then(patients => {\n                this.setState({ patients: patients })\n            })\n    }\n    render() {\n        const tableRef = React.createRef();\n        const tableRef1 = React.createRef();\n        const prescription = this.state.prescriptions.length ? this.state.prescriptions[0] : {};\n        return (\n            <Container>\n                <Row>\n                    <Col>\n                        <MaterialTable\n                            tableRef={tableRef}\n                            options={{\n                                sorting: false,\n                                search: false,\n                                paging: false,\n                                editable: false,\n                            }}\n                            title=\"Patient on Prescription\"\n                            columns={[\n                                { title: 'Name', render: p => (`${p.patient_first_name} ${p.patient_last_name}`) },\n                                { title: 'Date of birth', type: 'date', field: 'patient_date_of_birth' },\n                                { title: 'Address', field: 'patient_address' },\n                            ]}\n                            data={this.state.prescriptions}\n                        />\n                    </Col>\n                </Row>\n                <hr></hr>\n                <Row>\n                    <Col>\n                        <MaterialTable\n                            tableRef={tableRef1}\n                            options={{\n                                sorting: true,\n                                search: true,\n                                paging: true,\n                                editable: false,\n                                pageSize: 5,\n                            }}\n                            title=\"Find Patient in System\"\n                            columns={[\n                                { title: 'Name', render: p => (`${p.first_name} ${p.last_name}`) },\n                                { title: 'Date of birth', type: 'date', field: 'birth_date' },\n                                { title: 'Address', render: p => (`${p.address} ${p.city} ${p.state} ${p.zipcode}`) },\n                            ]}\n                            data={this.state.patients}\n                            actions={[\n                                {\n                                    icon: 'check',\n                                    tooltip: 'Match',\n                                    onClick: (event, row) => {\n                                        patchPrescription(prescription.prescription_id, { patient_id: row.patient_id, status: PrescriptionStatus.Verified_Patient }).then(_ => {\n                                            this.props.history.push(\"/verify-physician/\" + prescription.prescription_id);\n                                        })\n                                    }\n                                },\n                            ]}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n\n}\n\nconst mapState = (state) => { return { user: state.user } };\nconst mapDispatch = { app_login };\n\nexport default connect(mapState, mapDispatch)(VerifyPatient);"]},"metadata":{},"sourceType":"module"}