{"ast":null,"code":"const qs = require('qs');\n\nconst {\n  Unavailable\n} = require('@feathersjs/errors');\n\nconst {\n  _\n} = require('@feathersjs/commons');\n\nconst {\n  stripSlashes\n} = require('@feathersjs/commons');\n\nconst {\n  convert\n} = require('@feathersjs/errors');\n\nfunction toError(error) {\n  if (error.code === 'ECONNREFUSED') {\n    throw new Unavailable(error.message, _.pick(error, 'address', 'port', 'config'));\n  }\n\n  throw convert(error);\n}\n\nclass Base {\n  constructor(settings) {\n    this.name = stripSlashes(settings.name);\n    this.options = settings.options;\n    this.connection = settings.connection;\n    this.base = `${settings.base}/${this.name}`;\n  }\n\n  makeUrl(query, id) {\n    query = query || {};\n    let url = this.base;\n\n    if (typeof id !== 'undefined' && id !== null) {\n      url += `/${encodeURIComponent(id)}`;\n    }\n\n    return url + this.getQuery(query);\n  }\n\n  getQuery(query) {\n    if (Object.keys(query).length !== 0) {\n      const queryString = qs.stringify(query);\n      return `?${queryString}`;\n    }\n\n    return '';\n  }\n\n  find(params = {}) {\n    return this.request({\n      url: this.makeUrl(params.query),\n      method: 'GET',\n      headers: Object.assign({}, params.headers)\n    }, params).catch(toError);\n  }\n\n  get(id, params = {}) {\n    if (typeof id === 'undefined') {\n      return Promise.reject(new Error(`id for 'get' can not be undefined`));\n    }\n\n    return this.request({\n      url: this.makeUrl(params.query, id),\n      method: 'GET',\n      headers: Object.assign({}, params.headers)\n    }, params).catch(toError);\n  }\n\n  create(body, params = {}) {\n    return this.request({\n      url: this.makeUrl(params.query),\n      body,\n      method: 'POST',\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, params.headers)\n    }, params).catch(toError);\n  }\n\n  update(id, body, params = {}) {\n    if (typeof id === 'undefined') {\n      return Promise.reject(new Error(`id for 'update' can not be undefined, only 'null' when updating multiple entries`));\n    }\n\n    return this.request({\n      url: this.makeUrl(params.query, id),\n      body,\n      method: 'PUT',\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, params.headers)\n    }, params).catch(toError);\n  }\n\n  patch(id, body, params = {}) {\n    if (typeof id === 'undefined') {\n      return Promise.reject(new Error(`id for 'patch' can not be undefined, only 'null' when updating multiple entries`));\n    }\n\n    return this.request({\n      url: this.makeUrl(params.query, id),\n      body,\n      method: 'PATCH',\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, params.headers)\n    }, params).catch(toError);\n  }\n\n  remove(id, params = {}) {\n    if (typeof id === 'undefined') {\n      return Promise.reject(new Error(`id for 'remove' can not be undefined, only 'null' when removing multiple entries`));\n    }\n\n    return this.request({\n      url: this.makeUrl(params.query, id),\n      method: 'DELETE',\n      headers: Object.assign({}, params.headers)\n    }, params).catch(toError);\n  }\n\n}\n\nmodule.exports = Base;","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/healthcare/client/node_modules/@feathersjs/rest-client/lib/base.js"],"names":["qs","require","Unavailable","_","stripSlashes","convert","toError","error","code","message","pick","Base","constructor","settings","name","options","connection","base","makeUrl","query","id","url","encodeURIComponent","getQuery","Object","keys","length","queryString","stringify","find","params","request","method","headers","assign","catch","get","Promise","reject","Error","create","body","update","patch","remove","module","exports"],"mappings":"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","sourcesContent":["const qs = require('qs');\nconst { Unavailable } = require('@feathersjs/errors');\nconst { _ } = require('@feathersjs/commons');\nconst { stripSlashes } = require('@feathersjs/commons');\nconst { convert } = require('@feathersjs/errors');\n\nfunction toError (error) {\n  if (error.code === 'ECONNREFUSED') {\n    throw new Unavailable(error.message, _.pick(error, 'address', 'port', 'config'));\n  }\n\n  throw convert(error);\n}\n\nclass Base {\n  constructor (settings) {\n    this.name = stripSlashes(settings.name);\n    this.options = settings.options;\n    this.connection = settings.connection;\n    this.base = `${settings.base}/${this.name}`;\n  }\n\n  makeUrl (query, id) {\n    query = query || {};\n    let url = this.base;\n\n    if (typeof id !== 'undefined' && id !== null) {\n      url += `/${encodeURIComponent(id)}`;\n    }\n\n    return url + this.getQuery(query);\n  }\n\n  getQuery (query) {\n    if (Object.keys(query).length !== 0) {\n      const queryString = qs.stringify(query);\n\n      return `?${queryString}`;\n    }\n\n    return '';\n  }\n\n  find (params = {}) {\n    return this.request({\n      url: this.makeUrl(params.query),\n      method: 'GET',\n      headers: Object.assign({}, params.headers)\n    }, params).catch(toError);\n  }\n\n  get (id, params = {}) {\n    if (typeof id === 'undefined') {\n      return Promise.reject(new Error(`id for 'get' can not be undefined`));\n    }\n\n    return this.request({\n      url: this.makeUrl(params.query, id),\n      method: 'GET',\n      headers: Object.assign({}, params.headers)\n    }, params).catch(toError);\n  }\n\n  create (body, params = {}) {\n    return this.request({\n      url: this.makeUrl(params.query),\n      body,\n      method: 'POST',\n      headers: Object.assign({ 'Content-Type': 'application/json' }, params.headers)\n    }, params).catch(toError);\n  }\n\n  update (id, body, params = {}) {\n    if (typeof id === 'undefined') {\n      return Promise.reject(new Error(`id for 'update' can not be undefined, only 'null' when updating multiple entries`));\n    }\n\n    return this.request({\n      url: this.makeUrl(params.query, id),\n      body,\n      method: 'PUT',\n      headers: Object.assign({ 'Content-Type': 'application/json' }, params.headers)\n    }, params).catch(toError);\n  }\n\n  patch (id, body, params = {}) {\n    if (typeof id === 'undefined') {\n      return Promise.reject(new Error(`id for 'patch' can not be undefined, only 'null' when updating multiple entries`));\n    }\n\n    return this.request({\n      url: this.makeUrl(params.query, id),\n      body,\n      method: 'PATCH',\n      headers: Object.assign({ 'Content-Type': 'application/json' }, params.headers)\n    }, params).catch(toError);\n  }\n\n  remove (id, params = {}) {\n    if (typeof id === 'undefined') {\n      return Promise.reject(new Error(`id for 'remove' can not be undefined, only 'null' when removing multiple entries`));\n    }\n\n    return this.request({\n      url: this.makeUrl(params.query, id),\n      method: 'DELETE',\n      headers: Object.assign({}, params.headers)\n    }, params).catch(toError);\n  }\n}\n\nmodule.exports = Base;\n"]},"metadata":{},"sourceType":"script"}