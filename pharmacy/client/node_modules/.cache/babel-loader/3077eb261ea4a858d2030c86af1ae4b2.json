{"ast":null,"code":"var _jsxFileName = \"/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/physicians/physicianManager.js\";\nimport * as React from 'react';\nimport MaterialTable from 'material-table';\nimport { getPhysicians, patchPhysician, createPhysician, deletePhysician } from './physiciansService';\nconst zipRegex = /^\\d{5}$|^\\d{5}-\\d{4}$/;\nexport default class PhysicianManager extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      physicians: []\n    };\n\n    this.getData = () => {\n      return getPhysicians().then(physicians => {\n        this.setState({\n          physicians: physicians\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const tableRef = React.createRef();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MaterialTable, {\n      tableRef: tableRef,\n      options: {\n        sorting: true,\n        search: true,\n        paging: false\n      },\n      title: \"Physicians\",\n      columns: [// { title: 'Id', field: '_id' },\n      {\n        title: 'First name',\n        field: 'first_name',\n        validate: u => u.first_name == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Last name',\n        field: 'last_name',\n        validate: u => u.last_name == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'Institution',\n        field: 'institution',\n        validate: u => u.institution == \"\" ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }, {\n        title: 'License',\n        field: 'license',\n        validate: u => u.license == \"\" || !zipRegex.test(u.license) ? {\n          isValid: false,\n          helperText: \"required\"\n        } : {\n          isValid: true\n        }\n      }],\n      data: this.state.physicians,\n      editable: {\n        onRowUpdate: (newData, oldData) => {\n          return patchPhysician(newData.physician_id, newData).then(_ => this.getData());\n        },\n        onRowAdd: newData => {\n          return createPhysician(newData).then(_ => this.getData());\n        },\n        onRowDelete: oldData => {\n          return deletePhysician(oldData.physician_id).then(_ => this.getData());\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/physicians/physicianManager.js"],"names":["React","MaterialTable","getPhysicians","patchPhysician","createPhysician","deletePhysician","zipRegex","PhysicianManager","Component","state","physicians","getData","then","setState","componentDidMount","render","tableRef","createRef","sorting","search","paging","title","field","validate","u","first_name","isValid","helperText","last_name","institution","license","test","onRowUpdate","newData","oldData","physician_id","_","onRowAdd","onRowDelete"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport MaterialTable from 'material-table';\nimport { getPhysicians, patchPhysician, createPhysician, deletePhysician } from './physiciansService';\n\nconst zipRegex = /^\\d{5}$|^\\d{5}-\\d{4}$/;\n\nexport default class PhysicianManager extends React.Component {\n    state = {\n        physicians: []\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    getData = () => {\n        return getPhysicians()\n            .then(physicians => {\n                this.setState({ physicians: physicians })\n            })\n    }\n\n    render() {\n        const tableRef = React.createRef();\n        return (\n            <div>\n                <MaterialTable\n                    tableRef={tableRef}\n                    options={{\n                        sorting: true,\n                        search: true,\n                        paging: false,\n                    }}\n                    title=\"Physicians\"\n                    columns={[\n                        // { title: 'Id', field: '_id' },\n                        { title: 'First name', field: 'first_name', validate: u => u.first_name == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Last name', field: 'last_name', validate: u => u.last_name == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'Institution', field: 'institution', validate: u => u.institution == \"\" ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                        { title: 'License', field: 'license', validate: u => u.license == \"\" || !zipRegex.test(u.license) ? { isValid: false, helperText: \"required\" } : { isValid: true } },\n                    ]}\n                    data={this.state.physicians}\n                    editable={{\n                        onRowUpdate: (newData, oldData) => {\n                            return patchPhysician(newData.physician_id, newData).then(_ => this.getData())\n                        },\n                        onRowAdd: newData => {\n                            return createPhysician(newData).then(_ => this.getData())\n                        },\n                        onRowDelete: oldData => {\n                            return deletePhysician(oldData.physician_id).then(_ => this.getData())\n                        }\n                    }}\n                />\n            </div>\n\n        )\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}