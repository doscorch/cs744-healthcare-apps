{"ast":null,"code":"var _jsxFileName = \"/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/auth/login.js\";\nimport React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\nimport { loginUser } from './usersService';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nimport { getPolicyByPatientPharmacy } from '../patients/patientsService';\n\nclass Login extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      error: \"\"\n    };\n\n    this.test = async e => {\n      e.preventDefault();\n      let payload = {\n        prescription: {\n          patient_first_name: 'Peter',\n          patient_last_name: 'Parker',\n          patient_date_of_birth: '1982-03-27',\n          patient_address: '746 23rd Ave. New York City, NY'\n        },\n        medicine: {\n          medicine_code: 'AB17',\n          medical_name: 'Amoxicillin 50mg capsules',\n          commercial_name: 'amooxicillin'\n        }\n      };\n      let res = await getPolicyByPatientPharmacy(payload);\n      console.log('payload with medicine and policy holder');\n      console.log(res);\n      payload = {\n        prescription: {\n          patient_first_name: 'Peter',\n          patient_last_name: 'Parker',\n          patient_date_of_birth: '1982-03-27',\n          patient_address: '746 23rd Ave. New York City, NY'\n        },\n        medicine: {\n          medicine_code: '0000',\n          // Code is not found in insurance\n          medical_name: 'Amoxicillin 50mg capsules',\n          commercial_name: 'amooxicillin'\n        }\n      };\n      res = await getPolicyByPatientPharmacy(payload);\n      console.log('payload without medicine and policy holder');\n      console.log(res);\n      payload = {\n        prescription: {\n          patient_first_name: 'Ben',\n          // name is not found in insurance\n          patient_last_name: 'Parker',\n          patient_date_of_birth: '1982-03-27',\n          patient_address: '746 23rd Ave. New York City, NY'\n        },\n        medicine: {\n          medicine_code: 'AB17',\n          medical_name: 'Amoxicillin 50mg capsules',\n          commercial_name: 'amooxicillin'\n        }\n      };\n      res = await getPolicyByPatientPharmacy(payload);\n      console.log('payload without policy holder');\n      console.log(res);\n    };\n\n    this.login = async e => {\n      e.preventDefault(); // log the user in and go home\n\n      if (!this.state.username || this.state.username === \"\") {\n        this.setState({\n          error: \"Username is empty\"\n        });\n        return;\n      }\n\n      if (!this.state.password || this.state.password === \"\") {\n        this.setState({\n          error: \"Password is empty\"\n        });\n        return;\n      }\n\n      let res = await loginUser(this.state.username, this.state.password);\n\n      if (res.msg) {\n        this.setState({\n          error: res.msg\n        });\n      } else {\n        this.props.app_login(res.user);\n        this.props.history.push('/security-question');\n      }\n    };\n\n    this.changeForm = e => {\n      let propName = e.target.name;\n      let propValue = e.target.value;\n      let state = { ...this.state\n      };\n      state[propName] = propValue;\n      this.setState(state);\n    };\n  }\n\n  render() {\n    const classes = {\n      paper: {\n        marginTop: \"10px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      form: {\n        width: '100%',\n        marginTop: \"10px\"\n      },\n      submit: {\n        margin: \"10px\"\n      }\n    };\n    let alert = this.state.error ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 40\n      }\n    }, this.state.error) : \"\";\n    return /*#__PURE__*/React.createElement(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      component: \"h1\",\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(\"form\", {\n      style: classes.form,\n      noValidate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      variant: \"outlined\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      id: \"username\",\n      label: \"Username\",\n      name: \"username\",\n      autoComplete: \"username\",\n      autoFocus: true,\n      onChange: this.changeForm,\n      value: this.state.username,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      variant: \"outlined\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      name: \"password\",\n      label: \"Password\",\n      type: \"password\",\n      id: \"password\",\n      autoComplete: \"current-password\",\n      onChange: this.changeForm,\n      value: this.state.password,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      style: classes.submit,\n      onClick: this.login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }, \"Log In\")), alert), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      style: classes.submit,\n      onClick: this.test,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, \"Test\"));\n  }\n\n}\n\nconst mapState = state => {\n  return {\n    user: state.user\n  };\n};\n\nconst mapDispatch = {\n  app_login\n};\nexport default connect(mapState, mapDispatch)(Login);","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/pharmacy/client/src/auth/login.js"],"names":["React","Avatar","Button","TextField","Link","Grid","Container","Typography","Alert","loginUser","connect","app_login","getPolicyByPatientPharmacy","Login","Component","state","username","password","error","test","e","preventDefault","payload","prescription","patient_first_name","patient_last_name","patient_date_of_birth","patient_address","medicine","medicine_code","medical_name","commercial_name","res","console","log","login","setState","msg","props","user","history","push","changeForm","propName","target","name","propValue","value","render","classes","paper","marginTop","display","flexDirection","alignItems","form","width","submit","margin","alert","mapState","mapDispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { loginUser } from './usersService';\nimport { connect } from 'react-redux';\nimport { app_login } from '../redux/actions/userActions';\nimport {getPolicyByPatientPharmacy} from '../patients/patientsService';\nclass Login extends React.Component {\n    state = {\n        username: \"\",\n        password: \"\",\n        error: \"\",\n    }\n\n    test = async(e) => {\n        e.preventDefault();\n        let payload = {\n            prescription: {\n                patient_first_name: 'Peter',\n                patient_last_name: 'Parker',\n                patient_date_of_birth: '1982-03-27',\n                patient_address: '746 23rd Ave. New York City, NY',\n              },\n              medicine: {\n                medicine_code: 'AB17',\n                medical_name: 'Amoxicillin 50mg capsules',\n                commercial_name: 'amooxicillin',\n              }\n        };\n        let res = await getPolicyByPatientPharmacy(payload);\n        console.log('payload with medicine and policy holder');\n        console.log(res);\n\n        payload = {\n            prescription: {\n                patient_first_name: 'Peter',\n                patient_last_name: 'Parker',\n                patient_date_of_birth: '1982-03-27',\n                patient_address: '746 23rd Ave. New York City, NY',\n              },\n              medicine: {\n                medicine_code: '0000', // Code is not found in insurance\n                medical_name: 'Amoxicillin 50mg capsules',\n                commercial_name: 'amooxicillin',\n              }\n        };\n        res = await getPolicyByPatientPharmacy(payload);\n        console.log('payload without medicine and policy holder');\n        console.log(res);\n\n        payload = {\n            prescription: {\n                patient_first_name: 'Ben', // name is not found in insurance\n                patient_last_name: 'Parker',\n                patient_date_of_birth: '1982-03-27',\n                patient_address: '746 23rd Ave. New York City, NY',\n              },\n              medicine: {\n                medicine_code: 'AB17',\n                medical_name: 'Amoxicillin 50mg capsules',\n                commercial_name: 'amooxicillin',\n              }\n        };\n        res = await getPolicyByPatientPharmacy(payload);\n        console.log('payload without policy holder');\n        console.log(res);\n    }\n\n    login = async (e) => {\n        e.preventDefault();\n        // log the user in and go home\n        if (!this.state.username || this.state.username === \"\") {\n            this.setState({ error: \"Username is empty\" });\n            return;\n        }\n        if (!this.state.password || this.state.password === \"\") {\n            this.setState({ error: \"Password is empty\" });\n            return;\n        }\n        let res = await loginUser(this.state.username, this.state.password);\n        if (res.msg) {\n            this.setState({ error: res.msg });\n        }\n        else {\n            this.props.app_login(res.user);\n            this.props.history.push('/security-question');\n        }\n    }\n\n    changeForm = (e) => {\n        let propName = e.target.name;\n        let propValue = e.target.value;\n        let state = { ...this.state };\n        state[propName] = propValue;\n        this.setState(state);\n    }\n\n    render() {\n        const classes = {\n            paper: {\n                marginTop: \"10px\",\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n            },\n            form: {\n                width: '100%',\n                marginTop: \"10px\",\n            },\n            submit: {\n                margin: \"10px\",\n            },\n        };\n        let alert = this.state.error ? <Alert severity=\"error\">{this.state.error}</Alert> : \"\";\n\n        return (\n            <Container component=\"main\" maxWidth=\"xs\">\n                <div style={classes.paper}>\n                    <Avatar />\n                    <Typography component=\"h1\" variant=\"h5\">Login</Typography>\n                    <form style={classes.form} noValidate>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"username\"\n                            label=\"Username\"\n                            name=\"username\"\n                            autoComplete=\"username\"\n                            autoFocus\n                            onChange={this.changeForm}\n                            value={this.state.username}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                            onChange={this.changeForm}\n                            value={this.state.password}\n                        />\n\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            style={classes.submit}\n                            onClick={this.login}>\n                            Log In\n                        </Button>\n                    </form>\n                    {alert}\n                </div>\n                <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            style={classes.submit}\n                            onClick={this.test}>\n                            Test\n                        </Button>\n            </Container>\n        );\n    }\n}\n\nconst mapState = (state) => { return { user: state.user } };\nconst mapDispatch = { app_login };\n\nexport default connect(mapState, mapDispatch)(Login);"]},"metadata":{},"sourceType":"module"}