{"ast":null,"code":"const Base = require('./base');\n\nclass SuperagentService extends Base {\n  request(options, params) {\n    const superagent = this.connection(options.method, options.url).set(this.options.headers || {}).set('Accept', 'application/json').set(params.connection || {}).set(options.headers || {}).type(options.type || 'json');\n    return new Promise((resolve, reject) => {\n      superagent.set(options.headers);\n\n      if (options.body) {\n        superagent.send(options.body);\n      }\n\n      superagent.end(function (error, res) {\n        if (error) {\n          try {\n            const response = error.response;\n            error = JSON.parse(error.response.text);\n            error.response = response;\n          } catch (e) {}\n\n          return reject(error);\n        }\n\n        resolve(res && res.body);\n      });\n    });\n  }\n\n}\n\nmodule.exports = SuperagentService;","map":{"version":3,"sources":["D:/School work/CS 744/cs744-healthcare-apps/healthcare/client/node_modules/@feathersjs/rest-client/lib/superagent.js"],"names":["Base","require","SuperagentService","request","options","params","superagent","connection","method","url","set","headers","type","Promise","resolve","reject","body","send","end","error","res","response","JSON","parse","text","e","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAMC,iBAAN,SAAgCF,IAAhC,CAAqC;AACnCG,EAAAA,OAAO,CAAEC,OAAF,EAAWC,MAAX,EAAmB;AACxB,UAAMC,UAAU,GAAG,KAAKC,UAAL,CAAgBH,OAAO,CAACI,MAAxB,EAAgCJ,OAAO,CAACK,GAAxC,EAChBC,GADgB,CACZ,KAAKN,OAAL,CAAaO,OAAb,IAAwB,EADZ,EAEhBD,GAFgB,CAEZ,QAFY,EAEF,kBAFE,EAGhBA,GAHgB,CAGZL,MAAM,CAACE,UAAP,IAAqB,EAHT,EAIhBG,GAJgB,CAIZN,OAAO,CAACO,OAAR,IAAmB,EAJP,EAKhBC,IALgB,CAKXR,OAAO,CAACQ,IAAR,IAAgB,MALL,CAAnB;AAOA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCT,MAAAA,UAAU,CAACI,GAAX,CAAeN,OAAO,CAACO,OAAvB;;AAEA,UAAIP,OAAO,CAACY,IAAZ,EAAkB;AAChBV,QAAAA,UAAU,CAACW,IAAX,CAAgBb,OAAO,CAACY,IAAxB;AACD;;AAEDV,MAAAA,UAAU,CAACY,GAAX,CAAe,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACnC,YAAID,KAAJ,EAAW;AACT,cAAI;AACF,kBAAME,QAAQ,GAAGF,KAAK,CAACE,QAAvB;AACAF,YAAAA,KAAK,GAAGG,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACE,QAAN,CAAeG,IAA1B,CAAR;AACAL,YAAAA,KAAK,CAACE,QAAN,GAAiBA,QAAjB;AACD,WAJD,CAIE,OAAOI,CAAP,EAAU,CAAE;;AAEd,iBAAOV,MAAM,CAACI,KAAD,CAAb;AACD;;AAEDL,QAAAA,OAAO,CAACM,GAAG,IAAIA,GAAG,CAACJ,IAAZ,CAAP;AACD,OAZD;AAaD,KApBM,CAAP;AAqBD;;AA9BkC;;AAiCrCU,MAAM,CAACC,OAAP,GAAiBzB,iBAAjB","sourcesContent":["const Base = require('./base');\r\n\r\nclass SuperagentService extends Base {\r\n  request (options, params) {\r\n    const superagent = this.connection(options.method, options.url)\r\n      .set(this.options.headers || {})\r\n      .set('Accept', 'application/json')\r\n      .set(params.connection || {})\r\n      .set(options.headers || {})\r\n      .type(options.type || 'json');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      superagent.set(options.headers);\r\n\r\n      if (options.body) {\r\n        superagent.send(options.body);\r\n      }\r\n\r\n      superagent.end(function (error, res) {\r\n        if (error) {\r\n          try {\r\n            const response = error.response;\r\n            error = JSON.parse(error.response.text);\r\n            error.response = response;\r\n          } catch (e) {}\r\n\r\n          return reject(error);\r\n        }\r\n\r\n        resolve(res && res.body);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = SuperagentService;\r\n"]},"metadata":{},"sourceType":"script"}