{"ast":null,"code":"var _jsxFileName = \"/Users/doscorch/Desktop/cs744 project/insurance/client/src/auth/changePassword.js\";\nimport React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Alert from '@material-ui/lab/Alert';\nimport { updatePassword } from './usersService';\nconst initState = {\n  password: \"\",\n  error: \"\",\n  success: \"\",\n  username: \"\"\n};\nexport default class ChangePassword extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...initState\n    };\n\n    this.changePassword = async e => {\n      e.preventDefault();\n      const username = this.props.location.state.username;\n\n      if (!this.state.password) {\n        this.setState({\n          error: \"Please provide a password\"\n        });\n        return;\n      } // check the password bounds\n\n\n      let containsSpecialChar = function (text) {\n        let chars = ['~', '!', '@', '#', '$', '%', '^', '&', '*', '+'];\n\n        for (let charI = 0; charI < chars.length; charI++) {\n          if (text.includes(chars[charI])) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n\n      let passwordIsValid = this.state.password.match(/^[0-9a-zA-Z~!@#$%^&*+]+$/) && // is alphanumeric\n      this.state.password.length >= 6 && // is greater or equal to 6 (in length)\n      containsSpecialChar(this.state.password); // the first character is NOT a number\n\n      if (!passwordIsValid) {\n        this.setState({\n          error: \"The password must be have 6 or more characters, must contain only numbers and letters and the following special characters: ~!@#$%^&*+, and must start have at least one of the special characters: ~!@#$%^&*+!\"\n        });\n        return;\n      } // change password of user\n\n\n      let res = await updatePassword(username, this.state.password);\n\n      if (res.msg == null) {\n        this.setState({ ...initState,\n          success: \"Password successfully changed!\"\n        });\n      } else {\n        this.setState({\n          error: res.msg\n        });\n      }\n    };\n\n    this.changeForm = e => {\n      let propName = e.target.name;\n      let propValue = e.target.value;\n      let state = { ...this.state\n      };\n      state[propName] = propValue;\n      this.setState(state);\n    };\n  }\n\n  render() {\n    const classes = {\n      paper: {\n        marginTop: \"10px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      form: {\n        width: '100%',\n        marginTop: \"10px\"\n      },\n      submit: {\n        margin: \"10px\"\n      }\n    };\n    let error = this.state.error ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 40\n      }\n    }, this.state.error) : \"\";\n    let success = this.state.success ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 44\n      }\n    }, this.state.success) : \"\";\n    return /*#__PURE__*/React.createElement(Container, {\n      component: \"main\",\n      maxWidth: \"xs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      component: \"h1\",\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, \"Change Password\"), /*#__PURE__*/React.createElement(\"form\", {\n      style: classes.form,\n      noValidate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      name: \"password\",\n      label: \"Password\",\n      type: \"password\",\n      id: \"password\",\n      autoComplete: \"current-password\",\n      value: this.state.password,\n      onChange: this.changeForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      style: classes.submit,\n      onClick: this.changePassword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 25\n      }\n    }, \"Change my password\")), error, success));\n  }\n\n}","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/insurance/client/src/auth/changePassword.js"],"names":["React","Avatar","Button","TextField","Grid","Typography","Container","Alert","updatePassword","initState","password","error","success","username","ChangePassword","Component","state","changePassword","e","preventDefault","props","location","setState","containsSpecialChar","text","chars","charI","length","includes","passwordIsValid","match","res","msg","changeForm","propName","target","name","propValue","value","render","classes","paper","marginTop","display","flexDirection","alignItems","form","width","submit","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Alert from '@material-ui/lab/Alert';\nimport { updatePassword } from './usersService';\n\n\nconst initState = {\n    password: \"\",\n    error: \"\",\n    success: \"\",\n    username: \"\",\n}\n\n\n\nexport default class ChangePassword extends React.Component {\n\n    state = {\n        ...initState\n    }\n\n    /**\n     * Called when the User clicks on the register button. Posts to server/auth/register\n     * \n     * @param {*} e \n     * @author Sahee Thao\n     * @date 02/21/2021\n     */\n    changePassword = async (e) => {\n        e.preventDefault();\n        const username = this.props.location.state.username;\n\n        if (!this.state.password) {\n            this.setState({ error: \"Please provide a password\" });\n            return;\n        }\n        // check the password bounds\n\n        let containsSpecialChar = function (text) {\n            let chars = ['~', '!', '@', '#', '$', '%', '^', '&', '*', '+'];\n            for (let charI = 0; charI < chars.length; charI++) {\n                if (text.includes(chars[charI])) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        let passwordIsValid = \n        this.state.password.match(/^[0-9a-zA-Z~!@#$%^&*+]+$/) && // is alphanumeric\n        this.state.password.length >= 6 && // is greater or equal to 6 (in length)\n        containsSpecialChar(this.state.password); // the first character is NOT a number\n\n\n        if (!passwordIsValid) {\n            this.setState({ error: \"The password must be have 6 or more characters, must contain only numbers and letters and the following special characters: ~!@#$%^&*+, and must start have at least one of the special characters: ~!@#$%^&*+!\" });\n            return;\n        }\n        // change password of user\n        let res = await updatePassword(username, this.state.password);\n\n        if (res.msg == null) {\n            this.setState({ ...initState, success: \"Password successfully changed!\" });\n        } else {\n            this.setState({error: res.msg});\n        }\n    }\n\n    changeForm = (e) => {\n        let propName = e.target.name;\n        let propValue = e.target.value;\n        let state = { ...this.state };\n        state[propName] = propValue;\n        this.setState(state);\n    }\n    render() {\n        const classes = {\n            paper: {\n                marginTop: \"10px\",\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n            },\n            form: {\n                width: '100%',\n                marginTop: \"10px\"\n            },\n            submit: {\n                margin: \"10px\"\n            },\n        };\n        let error = this.state.error ? <Alert severity=\"error\">{this.state.error}</Alert> : \"\";\n        let success = this.state.success ? <Alert severity=\"success\">{this.state.success}</Alert> : \"\";\n\n        return (\n            <Container component=\"main\" maxWidth=\"xs\" >\n                <div style={classes.paper}>\n                    <Avatar />\n                    <Typography component=\"h1\" variant=\"h5\">Change Password</Typography>\n                    <form style={classes.form} noValidate>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    variant=\"outlined\"\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"current-password\"\n                                    value={this.state.password}\n                                    onChange={this.changeForm}\n                                />\n                            </Grid>\n                        </Grid>\n                        \n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            style={classes.submit}\n                            onClick={this.changePassword}>\n                            Change my password\n                        </Button>\n                    </form>\n                    {error}\n                    {success}\n                </div>\n            </Container>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}