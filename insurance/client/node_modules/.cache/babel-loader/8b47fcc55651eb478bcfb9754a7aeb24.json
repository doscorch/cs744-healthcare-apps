{"ast":null,"code":"import { ERROR } from \"../errorHandling\";\nimport client from \"../apiClient\";\nconst users = {}; // call api to register user\n\nexport const registerUser = async (username, password, firstName, lastName, user_type, security_answer_1, security_answer_2, security_answer_3, security_question_1, security_question_2, security_question_3, address, date_of_birth, license_number) => {\n  return await users.create({\n    \"username\": username,\n    \"password\": password,\n    \"firstName\": firstName,\n    \"lastName\": lastName,\n    userRole: \"patient\"\n  }, {});\n}; // call api to get users\n\nexport const getUsers = async () => {\n  return users.find().then(u => u.data);\n}; // call api to register user by username\n\nexport const getUser = async username => {\n  client.get(`/users/${username}`).then(user => {\n    return user;\n  });\n  return users.find({\n    query: {\n      username: username\n    }\n  }).then(u => u.data.length ? u.data[0] : undefined);\n}; // call api to update user\n\nexport const updateUser = async user => {\n  return await users.update(user._id, user, {});\n}; // call api to patch user\n\nexport const patchUser = async userPartial => {\n  return await users.patch(userPartial._id, userPartial, {});\n}; // call api to login user\n\nexport const loginUser = async (username, password) => {\n  try {\n    if (!username && !password) {\n      var _auth$user, _auth$user2;\n\n      let auth = await client.reAuthenticate();\n      return {\n        userId: (_auth$user = auth.user) === null || _auth$user === void 0 ? void 0 : _auth$user._id,\n        username: (_auth$user2 = auth.user) === null || _auth$user2 === void 0 ? void 0 : _auth$user2.username,\n        error: false\n      };\n    } else {\n      return client.post('/auth/login', {\n        username,\n        password\n      }).then(user => {\n        return {\n          user: user,\n          error: false\n        };\n      });\n    }\n  } catch (error) {\n    var _error$message;\n\n    console.log(error);\n    let message = (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : ERROR;\n    return {\n      error: message\n    };\n  }\n}; // logout user on client\n\nexport const logout = async () => {\n  return await client.logout();\n};","map":{"version":3,"sources":["D:/School work/CS 744/cs744-healthcare-apps/healthcare/client/src/auth/usersService.js"],"names":["ERROR","client","users","registerUser","username","password","firstName","lastName","user_type","security_answer_1","security_answer_2","security_answer_3","security_question_1","security_question_2","security_question_3","address","date_of_birth","license_number","create","userRole","getUsers","find","then","u","data","getUser","get","user","query","length","undefined","updateUser","update","_id","patchUser","userPartial","patch","loginUser","auth","reAuthenticate","userId","error","post","console","log","message","logout"],"mappings":"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","sourcesContent":["\r\nimport { ERROR } from \"../errorHandling\";\r\nimport client from \"../apiClient\";\r\n\r\nconst users = {};\r\n// call api to register user\r\nexport const registerUser = async (username, password, firstName, lastName, \r\n    user_type, security_answer_1, security_answer_2, security_answer_3, \r\n    security_question_1, security_question_2,security_question_3, \r\n    address, date_of_birth, license_number) => {\r\n    return await users.create({ \"username\": username, \"password\": password, \"firstName\": firstName, \"lastName\": lastName, userRole: \"patient\" }, {});\r\n}\r\n\r\n// call api to get users\r\nexport const getUsers = async () => {\r\n    return users.find().then(u => u.data)\r\n}\r\n\r\n// call api to register user by username\r\nexport const getUser = async (username) => {\r\n    client.get(`/users/${username}`).then(user => {\r\n        return user;\r\n    })\r\n    return users.find({\r\n        query: {\r\n            username: username\r\n        }\r\n    }).then(u => u.data.length ? u.data[0] : undefined)\r\n}\r\n\r\n// call api to update user\r\nexport const updateUser = async (user) => {\r\n    return await users.update(user._id, user, {});\r\n}\r\n\r\n// call api to patch user\r\nexport const patchUser = async (userPartial) => {\r\n    return await users.patch(userPartial._id, userPartial, {})\r\n}\r\n\r\n// call api to login user\r\nexport const loginUser = async (username, password) => {\r\n    try {\r\n        if (!username && !password) {\r\n            let auth = await client.reAuthenticate();\r\n            return {\r\n                userId: auth.user?._id,\r\n                username: auth.user?.username,\r\n                error: false,\r\n            }\r\n        } else {\r\n            return client.post('/auth/login', { username, password }).then(user => {\r\n                return {\r\n                    user: user,\r\n                    error: false,\r\n                }\r\n            })\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        let message = error?.message ?? ERROR;\r\n        return {\r\n            error: message,\r\n        };\r\n    }\r\n}\r\n\r\n// logout user on client\r\nexport const logout = async () => {\r\n    return await client.logout();\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}