{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\cs744-healthcare-apps\\\\insurance\\\\client\\\\src\\\\policy\\\\edit.js\";\nimport React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Alert from '@material-ui/lab/Alert';\nimport MaterialTable from 'material-table'; // import { registerUser, getAllSecurityQuestions } from './usersService';\n\nimport { Checkbox, InputLabel } from '@material-ui/core';\nimport { getAllDrugs, updatePolicy, getAllProcedures, getPolicyHoldersWithPolicy } from './policyService';\nconst initState = {\n  code: '',\n  policy_name: '',\n  age_limit: '',\n  max_coverage_per_year: '',\n  percent_coverage: '',\n  premium_per_month: '',\n  num_policy_holders: '',\n  status: '',\n  drug: '',\n  error: '',\n  success: '',\n  questions: null\n};\nlet maxAge = null;\nlet allDrugs = [];\nlet allProcedures = [];\nlet policy = null;\nexport default class UpdatePolicy extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...initState\n    };\n\n    this.updatePolicy = async e => {\n      e.preventDefault(); // error handling\n\n      if (!this.state.code) {\n        this.setState({\n          error: \"Please provide a code\"\n        });\n        return;\n      }\n\n      if (!this.state.policy_name) {\n        this.setState({\n          error: \"Please provide a name\"\n        });\n        return;\n      }\n\n      if (!this.state.age_limit) {\n        this.setState({\n          error: \"Please provide an age limit\"\n        });\n        return;\n      }\n\n      if (!Number.isInteger(+this.state.age_limit)) {\n        this.setState({\n          error: \"Please provide an integer age limit\"\n        });\n        return;\n      }\n\n      if (parseInt(this.state.age_limit) < maxAge) {\n        this.setState({\n          error: \"This policy has a policy holder that is \" + maxAge + \" years old (too old)!\"\n        });\n        return;\n      }\n\n      if (!this.state.max_coverage_per_year) {\n        this.setState({\n          error: \"Please provide a maximum coverage per year\"\n        });\n        return;\n      }\n\n      let decCount = function (num) {\n        if (Number.isInteger(num)) return 0;\n        if (num.split(\".\")[1] == null) return 0;\n        return num.split(\".\")[1].length || 0;\n      };\n\n      if (isNaN(this.state.max_coverage_per_year)) {\n        this.setState({\n          error: \"Please provide a number for maximum coverage per year\"\n        });\n        return;\n      }\n\n      if (decCount(this.state.max_coverage_per_year) > 2) {\n        this.setState({\n          error: \"Please provide no more than 2 decimals for maximum coverage per year\"\n        });\n        return;\n      }\n\n      if (!this.state.percent_coverage) {\n        this.setState({\n          error: \"Please provide a percent of coverage\"\n        });\n        return;\n      }\n\n      if (isNaN(this.state.percent_coverage)) {\n        this.setState({\n          error: \"Please provide a number for percent of coverage\"\n        });\n        return;\n      }\n\n      if (!this.state.premium_per_month) {\n        this.setState({\n          error: \"Please provide a premium per month\"\n        });\n        return;\n      }\n\n      if (isNaN(this.state.premium_per_month)) {\n        this.setState({\n          error: \"Please provide a number for premium per month\"\n        });\n        return;\n      }\n\n      if (decCount(this.state.premium_per_month) > 2) {\n        this.setState({\n          error: \"Please provide no more than 2 decimals for premium per month\"\n        });\n        return;\n      }\n\n      let selectedDrugIds = [];\n\n      for (let i = 0; i < allDrugs.length; i++) {\n        if (allDrugs[i].selected) {\n          selectedDrugIds.push(allDrugs[i].drug_id);\n        }\n      }\n\n      let selectedProcedureIds = [];\n\n      for (let i = 0; i < allProcedures.length; i++) {\n        if (allProcedures[i].selected) {\n          selectedProcedureIds.push(allProcedures[i].procedure_id);\n        }\n      }\n\n      if (selectedProcedureIds.length === 0 && selectedDrugIds.length === 0) {\n        this.setState({\n          error: \"Please add at least one drug or procedure\"\n        });\n        return;\n      }\n\n      if (!this.state.status) {\n        this.setState({\n          error: \"Please select a status\"\n        });\n        return;\n      }\n\n      if (this.state.status == 0) {\n        if (this.state.num_policy_holders != 0) {\n          this.setState({\n            error: \"This policy may not be inactive. \" + this.state.num_policy_holders + \" policy holder(s) still use(s) this policy!\"\n          });\n          return;\n        }\n      } // create policy\n\n\n      let res = await updatePolicy(policy.policy_id, this.state.code, this.state.policy_name, this.state.age_limit, this.state.max_coverage_per_year, this.state.percent_coverage, this.state.premium_per_month, this.state.status, selectedDrugIds, selectedProcedureIds);\n\n      if (res.data == null) {\n        this.setState({\n          success: \"Policy successfully updated!\"\n        });\n        this.setState({\n          error: ''\n        });\n        this.forceUpdate();\n      } else {\n        this.setState({\n          error: res.data\n        });\n      }\n    };\n\n    this.changeForm = e => {\n      let propName = e.target.name;\n      let propValue = e.target.value;\n      let state = { ...this.state\n      };\n      state[propName] = propValue;\n      this.setState(state);\n    };\n\n    this.generateDrugs = () => {\n      const tableRef = React.createRef();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        tableRef: tableRef,\n        title: \"\",\n        columns: [{\n          title: 'Code',\n          field: 'drug_code'\n        }, {\n          title: 'Drug Name',\n          field: 'drug_name'\n        }, {\n          title: 'Commercial Name',\n          field: 'commercial_name'\n        }, {\n          title: '',\n          field: '',\n          render: d => /*#__PURE__*/React.createElement(Button, {\n            value: d.drug_id,\n            onClick: e => {\n              d.selected = false;\n              this.forceUpdate();\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 42\n            }\n          }, \"Remove\")\n        }],\n        data: allDrugs.filter(function (val) {\n          return val.selected;\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }\n      }));\n    };\n\n    this.generateProcedures = () => {\n      const tableRef = React.createRef();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        tableRef: tableRef,\n        title: \"\",\n        columns: [{\n          title: 'Code',\n          field: 'procedure_id_hc'\n        }, {\n          title: 'Procedure Name',\n          field: 'procedure_name'\n        }, {\n          title: '',\n          field: '',\n          render: d => /*#__PURE__*/React.createElement(Button, {\n            value: d.procedure_id,\n            onClick: e => {\n              d.selected = false;\n              this.forceUpdate();\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 42\n            }\n          }, \"Remove\")\n        }],\n        data: allProcedures.filter(function (val) {\n          return val.selected;\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }\n      }));\n    };\n\n    this.generateDrugsCheckbox = () => {\n      const tableRef = React.createRef();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        tableRef: tableRef,\n        title: \"\",\n        columns: [{\n          title: 'Code',\n          field: 'drug_code'\n        }, {\n          title: 'Drug Name',\n          field: 'drug_name'\n        }, {\n          title: 'Commercial Name',\n          field: 'commercial_name'\n        }, {\n          title: 'Select',\n          field: '',\n          render: d => /*#__PURE__*/React.createElement(Checkbox, {\n            key: d.drug_id,\n            color: \"primary\",\n            checked: d.selected,\n            onChange: e => {\n              d.selected = !d.selected;\n              console.log(allDrugs);\n              this.forceUpdate();\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 42\n            }\n          })\n        }],\n        data: allDrugs,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }\n      }));\n    };\n\n    this.generateProceduresCheckbox = () => {\n      const tableRef = React.createRef();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MaterialTable, {\n        tableRef: tableRef,\n        title: \"\",\n        columns: [{\n          title: 'Code',\n          field: 'procedure_id_hc'\n        }, {\n          title: 'Procedure Name',\n          field: 'procedure_name'\n        }, {\n          title: 'Select',\n          field: '',\n          render: d => /*#__PURE__*/React.createElement(Checkbox, {\n            key: d.procedure_id,\n            color: \"primary\",\n            checked: d.selected,\n            onChange: e => {\n              d.selected = !d.selected;\n              this.forceUpdate();\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 42\n            }\n          })\n        }],\n        data: allProcedures,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 17\n        }\n      }));\n    };\n  }\n\n  async componentDidMount() {\n    let result = await getAllDrugs();\n    allDrugs = result.data;\n\n    for (let i = 0; i < allDrugs.length; i++) {\n      allDrugs[i].selected = false;\n    }\n\n    result = await getAllProcedures();\n    allProcedures = result.data;\n\n    for (let i = 0; i < allProcedures.length; i++) {\n      allProcedures[i].selected = false;\n    }\n\n    policy = this.props.location.state.policy;\n    let state = { ...this.state\n    };\n    state['code'] = policy.code;\n    state['policy_name'] = policy.policy_name;\n    state['age_limit'] = policy.age_limit;\n    state['max_coverage_per_year'] = policy.max_coverage_per_year;\n    state['percent_coverage'] = policy.percent_coverage;\n    state['premium_per_month'] = policy.premium_per_month;\n    state['status'] = policy.policy_status;\n    this.setState(state);\n    let drugsArr = policy.drugs.split(',');\n    console.log('drugsArr');\n\n    for (let i = 0; i < drugsArr.length; i++) {\n      drugsArr[i] = drugsArr[i].trim();\n\n      for (let j = 0; j < allDrugs.length; j++) {\n        if (allDrugs[j].drug_name == drugsArr[i]) {\n          allDrugs[j].selected = true;\n          break;\n        }\n      }\n    }\n\n    let proceduresArr = policy.procedures.split(',');\n\n    for (let i = 0; i < proceduresArr.length; i++) {\n      proceduresArr[i] = proceduresArr[i].trim();\n\n      for (let j = 0; j < allProcedures.length; j++) {\n        if (allProcedures[j].procedure_name == proceduresArr[i]) {\n          allProcedures[j].selected = true;\n          break;\n        }\n      }\n    }\n\n    console.log('procedures');\n    console.log(proceduresArr);\n    console.log(allProcedures);\n    let policyHolders = await getPolicyHoldersWithPolicy(policy.policy_id);\n    state['num_policy_holders'] = policyHolders.data.length; // Get max age\n\n    maxAge = Math.max(...policyHolders.data.map(ph => {\n      let parts = ph.date_of_birth.split('-'); // January - 0, February - 1, etc.\n\n      let birthday = new Date(parts[0], parts[1] - 1, parts[2]);\n      let curDate = new Date();\n      let diff = new Date(curDate.getTime() - birthday.getTime()); // diff is: Thu Jul 05 1973 04:00:00 GMT+0300 (EEST)\n\n      return diff.getUTCFullYear() - 1970;\n    }), 0);\n    this.setState(state);\n    this.forceUpdate();\n  }\n\n  render() {\n    const classes = {\n      paper: {\n        marginTop: \"10px\",\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      form: {\n        width: '100%',\n        marginTop: \"10px\"\n      },\n      submit: {\n        margin: \"10px\"\n      },\n      center: {\n        margin: 'auto'\n      }\n    };\n    let error = this.state.error ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 40\n      }\n    }, this.state.error) : \"\";\n    let success = this.state.success ? /*#__PURE__*/React.createElement(Alert, {\n      severity: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 44\n      }\n    }, this.state.success) : \"\";\n    return /*#__PURE__*/React.createElement(Container, {\n      component: \"main\",\n      maxWidth: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      component: \"h1\",\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 21\n      }\n    }, \"Edit Policy\"), /*#__PURE__*/React.createElement(\"form\", {\n      style: classes.form,\n      noValidate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      autoComplete: \"code\",\n      name: \"code\",\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      disabled: true,\n      id: \"code\",\n      label: \"Code\",\n      autoFocus: true,\n      required: true,\n      value: this.state.code,\n      onChange: this.changeForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      autoComplete: \"policyName\",\n      name: \"policy_name\",\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      disabled: true,\n      id: \"policy_name\",\n      label: \"Name\",\n      required: true,\n      value: this.state.policy_name,\n      onChange: this.changeForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      id: \"age_limit\",\n      label: \"Age Limit\",\n      name: \"age_limit\",\n      autoComplete: \"agelimit\",\n      value: this.state.age_limit,\n      onChange: this.changeForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      id: \"max_coverage_per_year\",\n      label: \"Max Coverage per Year\",\n      name: \"max_coverage_per_year\",\n      autoComplete: \"maxCoveragePerYear\",\n      value: this.state.max_coverage_per_year,\n      onChange: this.changeForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      id: \"percent_coverage\",\n      label: \"Percent of Coverage\",\n      name: \"percent_coverage\",\n      autoComplete: \"perCov\",\n      value: this.state.percent_coverage,\n      onChange: this.changeForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      id: \"premium_per_month\",\n      label: \"Premium per Month\",\n      name: \"premium_per_month\",\n      autoComplete: \"premiumPerMonth\",\n      value: this.state.premium_per_month,\n      onChange: this.changeForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      id: \"status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 33\n      }\n    }, \"Status\"), /*#__PURE__*/React.createElement(Select, {\n      labelId: \"status-select\",\n      required: true,\n      fullWidth: true,\n      name: \"status\",\n      id: \"status\",\n      \"auto-complete\": \"status\",\n      value: this.state.status,\n      onChange: this.changeForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(MenuItem, {\n      value: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 37\n      }\n    }, \"Active\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 37\n      }\n    }, \"Inactive\"))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: classes.center,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 29\n      }\n    }, this.generateDrugsCheckbox())), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: classes.center,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 33\n      }\n    }, \"Selected Drug(s)\"), this.generateDrugs())), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: classes.center,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 29\n      }\n    }, this.generateProceduresCheckbox())), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: classes.center,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 33\n      }\n    }, \"Selected Procedure(s)\"), this.generateProcedures())), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      fullWidth: true,\n      variant: \"contained\",\n      color: \"primary\",\n      style: classes.submit,\n      onClick: this.updatePolicy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 29\n      }\n    }, \"Update\"))), error, success));\n  }\n\n}","map":{"version":3,"sources":["D:/GitHub/cs744-healthcare-apps/insurance/client/src/policy/edit.js"],"names":["React","Avatar","Button","TextField","Link","Grid","Typography","Container","Select","MenuItem","Alert","MaterialTable","Checkbox","InputLabel","getAllDrugs","updatePolicy","getAllProcedures","getPolicyHoldersWithPolicy","initState","code","policy_name","age_limit","max_coverage_per_year","percent_coverage","premium_per_month","num_policy_holders","status","drug","error","success","questions","maxAge","allDrugs","allProcedures","policy","UpdatePolicy","Component","state","e","preventDefault","setState","Number","isInteger","parseInt","decCount","num","split","length","isNaN","selectedDrugIds","i","selected","push","drug_id","selectedProcedureIds","procedure_id","res","policy_id","data","forceUpdate","changeForm","propName","target","name","propValue","value","generateDrugs","tableRef","createRef","title","field","render","d","filter","val","generateProcedures","generateDrugsCheckbox","console","log","generateProceduresCheckbox","componentDidMount","result","props","location","policy_status","drugsArr","drugs","trim","j","drug_name","proceduresArr","procedures","procedure_name","policyHolders","Math","max","map","ph","parts","date_of_birth","birthday","Date","curDate","diff","getTime","getUTCFullYear","classes","paper","marginTop","display","flexDirection","alignItems","form","width","submit","margin","center"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport MaterialTable from 'material-table';\r\n\r\n\r\n// import { registerUser, getAllSecurityQuestions } from './usersService';\r\nimport { Checkbox, InputLabel } from '@material-ui/core';\r\nimport { getAllDrugs, updatePolicy, getAllProcedures, getPolicyHoldersWithPolicy } from './policyService';\r\nconst initState = {\r\n    code: '',\r\n    policy_name: '',\r\n    age_limit: '',\r\n    max_coverage_per_year: '',\r\n    percent_coverage: '',\r\n    premium_per_month: '',\r\n    num_policy_holders: '',\r\n    status: '',\r\n    drug: '',\r\n    error: '',\r\n    success: '',\r\n    questions: null,\r\n}\r\nlet maxAge = null;\r\nlet allDrugs = [];\r\nlet allProcedures = [];\r\nlet policy = null;\r\nexport default class UpdatePolicy extends React.Component {\r\n\r\n    state = {\r\n        ...initState\r\n    }\r\n\r\n    updatePolicy = async (e) => {\r\n\r\n        e.preventDefault();\r\n        // error handling\r\n        if (!this.state.code) {\r\n            this.setState({ error: \"Please provide a code\" });\r\n            return;\r\n        }\r\n\r\n        if (!this.state.policy_name) {\r\n            this.setState({ error: \"Please provide a name\" });\r\n            return;\r\n        }\r\n\r\n        if (!this.state.age_limit) {\r\n            this.setState({ error: \"Please provide an age limit\" });\r\n            return;\r\n        }\r\n\r\n        if (!Number.isInteger(+this.state.age_limit)) {\r\n            this.setState({ error: \"Please provide an integer age limit\" });\r\n            return;\r\n        }\r\n\r\n        if (parseInt(this.state.age_limit) < maxAge) {\r\n            this.setState({ error: \"This policy has a policy holder that is \" + maxAge + \" years old (too old)!\" });\r\n            return;\r\n        }\r\n\r\n        if (!this.state.max_coverage_per_year) {\r\n            this.setState({ error: \"Please provide a maximum coverage per year\" });\r\n            return;\r\n        }\r\n        let decCount = function (num) {\r\n            if (Number.isInteger(num)) return 0;\r\n            if (num.split(\".\")[1] == null) return 0;\r\n            return num.split(\".\")[1].length || 0;\r\n        }\r\n\r\n        if (isNaN(this.state.max_coverage_per_year)) {\r\n            this.setState({ error: \"Please provide a number for maximum coverage per year\" });\r\n            return;\r\n        }\r\n\r\n        if (decCount(this.state.max_coverage_per_year) > 2) {\r\n            this.setState({ error: \"Please provide no more than 2 decimals for maximum coverage per year\" });\r\n            return;\r\n        }\r\n\r\n        if (!this.state.percent_coverage) {\r\n            this.setState({ error: \"Please provide a percent of coverage\" });\r\n            return;\r\n        }\r\n\r\n        if (isNaN(this.state.percent_coverage)) {\r\n            this.setState({ error: \"Please provide a number for percent of coverage\" });\r\n            return;\r\n        }\r\n\r\n\r\n        if (!this.state.premium_per_month) {\r\n            this.setState({ error: \"Please provide a premium per month\" });\r\n            return;\r\n        }\r\n\r\n        if (isNaN(this.state.premium_per_month)) {\r\n            this.setState({ error: \"Please provide a number for premium per month\" });\r\n            return;\r\n        }\r\n\r\n        if (decCount(this.state.premium_per_month) > 2) {\r\n            this.setState({ error: \"Please provide no more than 2 decimals for premium per month\" });\r\n            return;\r\n        }\r\n\r\n        let selectedDrugIds = [];\r\n\r\n        for (let i = 0; i < allDrugs.length; i++) {\r\n            if (allDrugs[i].selected) {\r\n                selectedDrugIds.push(allDrugs[i].drug_id);\r\n            }\r\n        }\r\n\r\n        let selectedProcedureIds = [];\r\n\r\n        for (let i = 0; i < allProcedures.length; i++) {\r\n            if (allProcedures[i].selected) {\r\n                selectedProcedureIds.push(allProcedures[i].procedure_id);\r\n            }\r\n        }\r\n        if (selectedProcedureIds.length === 0 && selectedDrugIds.length === 0) {\r\n            this.setState({ error: \"Please add at least one drug or procedure\" });\r\n            return;\r\n        }\r\n\r\n        if (!this.state.status) {\r\n            this.setState({ error: \"Please select a status\" });\r\n            return;\r\n        }\r\n\r\n        if (this.state.status == 0) {\r\n            if (this.state.num_policy_holders != 0) {\r\n                this.setState({ error: \"This policy may not be inactive. \" + this.state.num_policy_holders + \" policy holder(s) still use(s) this policy!\" });\r\n                return;\r\n            }\r\n        }\r\n        // create policy\r\n        let res = await updatePolicy(policy.policy_id, this.state.code, this.state.policy_name, this.state.age_limit, this.state.max_coverage_per_year,\r\n            this.state.percent_coverage, this.state.premium_per_month, this.state.status, selectedDrugIds, selectedProcedureIds);\r\n\r\n        if (res.data == null) {\r\n            this.setState({ success: \"Policy successfully updated!\" });\r\n            this.setState({ error: '' });\r\n            this.forceUpdate();\r\n        } else {\r\n            this.setState({ error: res.data });\r\n        }\r\n    }\r\n\r\n    changeForm = (e) => {\r\n        let propName = e.target.name;\r\n        let propValue = e.target.value;\r\n        let state = { ...this.state };\r\n        state[propName] = propValue;\r\n        this.setState(state);\r\n    }\r\n\r\n    generateDrugs = () => {\r\n        const tableRef = React.createRef();\r\n        return (\r\n            <div>\r\n                <MaterialTable\r\n                    tableRef={tableRef}\r\n                    title=''\r\n                    columns={[\r\n                        { title: 'Code', field: 'drug_code'},\r\n                        { title: 'Drug Name', field: 'drug_name' },\r\n                        { title: 'Commercial Name', field: 'commercial_name'},\r\n                        {\r\n                            title: '',\r\n                            field: '',\r\n                            render: d => <Button value={d.drug_id} onClick={(e) => {d.selected = false; this.forceUpdate();}}>Remove</Button>\r\n                        }\r\n                    ]}\r\n                    data={allDrugs.filter(function (val) {\r\n                        return val.selected;\r\n                    })}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    generateProcedures = () => {\r\n        const tableRef = React.createRef();\r\n        return (\r\n            <div>\r\n                <MaterialTable\r\n                    tableRef={tableRef}\r\n                    title=''\r\n                    columns={[\r\n                        { title: 'Code', field: 'procedure_id_hc'},\r\n                        { title: 'Procedure Name', field: 'procedure_name' },\r\n                        {\r\n                            title: '',\r\n                            field: '',\r\n                            render: d => <Button value={d.procedure_id} onClick={(e) => {d.selected = false; this.forceUpdate();}}>Remove</Button>\r\n                        }\r\n                    ]}\r\n                    data={allProcedures.filter(function (val) {\r\n                        return val.selected;\r\n                    })}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    generateDrugsCheckbox = () => {\r\n        \r\n        const tableRef = React.createRef();\r\n\r\n\r\n        return (\r\n            <div>\r\n                <MaterialTable\r\n                    tableRef={tableRef}\r\n                    title=''\r\n                    columns={[\r\n                        { title: 'Code', field: 'drug_code'},\r\n                        { title: 'Drug Name', field: 'drug_name' },\r\n                        { title: 'Commercial Name', field: 'commercial_name'},\r\n                        {\r\n                            title: 'Select',\r\n                            field: '',\r\n                            render: d => <Checkbox key={d.drug_id} color='primary' checked={d.selected} onChange={(e) => {d.selected = !d.selected; console.log(allDrugs); this.forceUpdate();}}/>\r\n                        }\r\n                    ]}\r\n                    data={allDrugs}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    generateProceduresCheckbox = () => {\r\n        \r\n        const tableRef = React.createRef();\r\n\r\n\r\n        return (\r\n            <div>\r\n                <MaterialTable\r\n                    tableRef={tableRef}\r\n                    title=''\r\n                    columns={[\r\n                        { title: 'Code', field: 'procedure_id_hc'},\r\n                        { title: 'Procedure Name', field: 'procedure_name' },\r\n                        {\r\n                            title: 'Select',\r\n                            field: '',\r\n                            render: d => <Checkbox key={d.procedure_id} color='primary' checked={d.selected} onChange={(e) => {d.selected = !d.selected; this.forceUpdate();}}/>\r\n                        }\r\n                    ]}\r\n                    data={allProcedures}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let result = await getAllDrugs();\r\n        allDrugs = result.data;\r\n        for (let i = 0; i < allDrugs.length; i++) {\r\n            allDrugs[i].selected = false;\r\n        }\r\n\r\n        result = await getAllProcedures();\r\n        allProcedures = result.data;\r\n        for (let i = 0; i < allProcedures.length; i++) {\r\n            allProcedures[i].selected = false;\r\n        }\r\n\r\n        policy = this.props.location.state.policy;\r\n        let state = { ...this.state };\r\n        state['code'] = policy.code;\r\n        state['policy_name'] = policy.policy_name;\r\n        state['age_limit'] = policy.age_limit;\r\n        state['max_coverage_per_year'] = policy.max_coverage_per_year;\r\n        state['percent_coverage'] = policy.percent_coverage;\r\n        state['premium_per_month'] = policy.premium_per_month;\r\n        state['status'] = policy.policy_status;\r\n        this.setState(state);\r\n\r\n        let drugsArr = policy.drugs.split(',');\r\n        console.log('drugsArr');\r\n        for (let i = 0; i < drugsArr.length; i++) {\r\n            drugsArr[i] = drugsArr[i].trim();\r\n            for (let j = 0; j < allDrugs.length; j++) {\r\n                if (allDrugs[j].drug_name == drugsArr[i]) {\r\n                    allDrugs[j].selected = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let proceduresArr = policy.procedures.split(',');\r\n        for (let i = 0; i < proceduresArr.length; i++) {\r\n            proceduresArr[i] = proceduresArr[i].trim();\r\n            for (let j = 0; j < allProcedures.length; j++) {\r\n                if (allProcedures[j].procedure_name == proceduresArr[i]) {\r\n                    allProcedures[j].selected = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        console.log('procedures');\r\n        console.log(proceduresArr);\r\n        console.log(allProcedures);\r\n\r\n        let policyHolders = await getPolicyHoldersWithPolicy(policy.policy_id);\r\n        state['num_policy_holders'] = policyHolders.data.length;\r\n\r\n        // Get max age\r\n        maxAge = Math.max(...policyHolders.data.map(ph => {\r\n            let parts = ph.date_of_birth.split('-');\r\n            // January - 0, February - 1, etc.\r\n            let birthday = new Date(parts[0], parts[1] - 1, parts[2]); \r\n\r\n            let curDate = new Date();\r\n\r\n            let diff = new Date(curDate.getTime() - birthday.getTime());\r\n            // diff is: Thu Jul 05 1973 04:00:00 GMT+0300 (EEST)\r\n\r\n            return diff.getUTCFullYear() - 1970;\r\n        }), 0);\r\n\r\n\r\n\r\n        this.setState(state);\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        const classes = {\r\n            paper: {\r\n                marginTop: \"10px\",\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n            },\r\n            form: {\r\n                width: '100%',\r\n                marginTop: \"10px\"\r\n            },\r\n            submit: {\r\n                margin: \"10px\"\r\n            },\r\n            center: {\r\n                margin: 'auto'\r\n            }\r\n        };\r\n        let error = this.state.error ? <Alert severity=\"error\">{this.state.error}</Alert> : \"\";\r\n        let success = this.state.success ? <Alert severity=\"success\">{this.state.success}</Alert> : \"\";\r\n\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"lg\" >\r\n                <div style={classes.paper}>\r\n\r\n                    <Typography component=\"h1\" variant=\"h5\">Edit Policy</Typography>\r\n                    <form style={classes.form} noValidate>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    autoComplete=\"code\"\r\n                                    name=\"code\"\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth \r\n                                    disabled\r\n                                    id=\"code\"\r\n                                    label=\"Code\"\r\n                                    autoFocus\r\n                                    required\r\n                                    value={this.state.code}\r\n                                    onChange={this.changeForm}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    autoComplete=\"policyName\"\r\n                                    name=\"policy_name\"\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth \r\n                                    disabled\r\n                                    id=\"policy_name\"\r\n                                    label=\"Name\"\r\n                                    required\r\n                                    value={this.state.policy_name}\r\n                                    onChange={this.changeForm}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"age_limit\"\r\n                                    label=\"Age Limit\"\r\n                                    name=\"age_limit\"\r\n                                    autoComplete=\"agelimit\"\r\n                                    value={this.state.age_limit}\r\n                                    onChange={this.changeForm}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"max_coverage_per_year\"\r\n                                    label=\"Max Coverage per Year\"\r\n                                    name=\"max_coverage_per_year\"\r\n                                    autoComplete=\"maxCoveragePerYear\"\r\n                                    value={this.state.max_coverage_per_year}\r\n                                    onChange={this.changeForm}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"percent_coverage\"\r\n                                    label=\"Percent of Coverage\"\r\n                                    name=\"percent_coverage\"\r\n                                    autoComplete=\"perCov\"\r\n                                    value={this.state.percent_coverage}\r\n                                    onChange={this.changeForm}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"premium_per_month\"\r\n                                    label=\"Premium per Month\"\r\n                                    name=\"premium_per_month\"\r\n                                    autoComplete=\"premiumPerMonth\"\r\n                                    value={this.state.premium_per_month}\r\n                                    onChange={this.changeForm}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <InputLabel id='status'>Status</InputLabel>\r\n                                <Select\r\n                                    labelId=\"status-select\"\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"status\"\r\n                                    id=\"status\"\r\n                                    auto-complete='status'\r\n                                    value={this.state.status}\r\n                                    onChange={this.changeForm}>\r\n                                    <MenuItem value=\"1\">Active</MenuItem>\r\n                                    <MenuItem value=\"0\">Inactive</MenuItem>\r\n                                </Select>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <div style={classes.center}>\r\n                                {this.generateDrugsCheckbox()}\r\n                            </div>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <div style={classes.center}>\r\n                                <h3>Selected Drug(s)</h3>\r\n                                {this.generateDrugs()}\r\n                            </div>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <div style={classes.center}>\r\n                                {this.generateProceduresCheckbox()}\r\n                            </div>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                            <div style={classes.center}>\r\n                                <h3>Selected Procedure(s)</h3>\r\n                                {this.generateProcedures()}\r\n                            </div>\r\n                            </Grid>\r\n                            \r\n                            <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                style={classes.submit}\r\n                                onClick={this.updatePolicy}>\r\n                                Update\r\n                            </Button>\r\n                        </Grid>\r\n\r\n\r\n                    </form>\r\n                    {error}\r\n                    {success}\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}