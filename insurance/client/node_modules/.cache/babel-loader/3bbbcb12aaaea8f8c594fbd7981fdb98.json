{"ast":null,"code":"import { ERROR } from \"../errorHandling\";\nimport client from \"../serviceClient/apiClient\";\nconst users = {}; // call api to register user\n\n/**\n * \n * @param {String} username \n * @param {String} password \n * @param {String} firstName - TODO: refactor name\n * @param {String} lastName - TODO: refactor name\n * @param {String} user_type - admin, patient, physician only \n * @param {String} security_answer_1 \n * @param {String} security_answer_2 \n * @param {String} security_answer_3 \n * @param {Integer} security_question_1 \n * @param {Integer} security_question_2 \n * @param {Integer} security_question_3 \n * @param {String} address \n * @param {String} date_of_birth \n * @param {String} license_number\n * \n * @return {object} - contains msg property. If msg is null, there was a success. If msg is not null, it contains an error message\n */\n\nexport const registerUser = async (username, password, firstName, lastName, user_type, security_answer_1, security_answer_2, security_answer_3, security_question_1, security_question_2, security_question_3, address, date_of_birth, license_number) => {\n  let args = {\n    username,\n    password,\n    firstName,\n    lastName,\n    user_type,\n    security_question_1,\n    security_answer_1,\n    security_question_2,\n    security_answer_2,\n    security_question_3,\n    security_answer_3,\n    address,\n    date_of_birth,\n    license_number\n  };\n  return client.post('/auth/register', args).then(res => {\n    return {\n      msg: res.msg\n    };\n  });\n}; // call api to get users\n\nexport const getUsers = async () => {\n  return client.get('/users').then(users => {\n    return users;\n  });\n};\nexport const getQuestions = async user => {\n  const response = await client.get('/auth/questions/' + user.user_id);\n  return response.questions;\n}; //call api to check security question answer\n\nexport const answerSecurityQuestion = async (user, question_id, answer, attempt) => {\n  let response = client.post('/auth/answerquestion', {\n    user: user,\n    question_id: question_id,\n    answer: answer,\n    attempt: attempt\n  });\n  return response;\n}; // call api to register user by username\n\nexport const getUser = async username => {\n  client.get(`/users/${username}`).then(user => {\n    return user;\n  });\n  return users.find({\n    query: {\n      username: username\n    }\n  }).then(u => u.data.length ? u.data[0] : undefined);\n}; // call api to update user\n\nexport const updateUser = async user => {// await users.update(user._id, user, {});\n}; // call api to patch user\n\nexport const patchUser = async (userId, userPartial) => {\n  return await client.patch(`users/${userId}`, userPartial);\n}; // call api to login user\n\nexport const loginUser = async (username, password) => {\n  try {\n    if (!username && !password) {\n      var _auth$user, _auth$user2;\n\n      let auth = await client.reAuthenticate();\n      return {\n        userId: (_auth$user = auth.user) === null || _auth$user === void 0 ? void 0 : _auth$user._id,\n        username: (_auth$user2 = auth.user) === null || _auth$user2 === void 0 ? void 0 : _auth$user2.username,\n        error: false\n      };\n    } else {\n      return client.post('/auth/login', {\n        username,\n        password\n      }).then(res => {\n        return {\n          user: res.data,\n          msg: null\n        };\n      });\n    }\n  } catch (error) {\n    var _error$message;\n\n    console.log(error);\n    let message = (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : ERROR;\n    return {\n      error: message\n    };\n  }\n}; // logout user on client\n\nexport const logout = async () => {\n  return await client.post('/auth/logout');\n};","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/healthcare/client/src/auth/usersService.js"],"names":["ERROR","client","users","registerUser","username","password","firstName","lastName","user_type","security_answer_1","security_answer_2","security_answer_3","security_question_1","security_question_2","security_question_3","address","date_of_birth","license_number","args","post","then","res","msg","getUsers","get","getQuestions","user","response","user_id","questions","answerSecurityQuestion","question_id","answer","attempt","getUser","find","query","u","data","length","undefined","updateUser","patchUser","userId","userPartial","patch","loginUser","auth","reAuthenticate","_id","error","console","log","message","logout"],"mappings":"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","sourcesContent":["\nimport { ERROR } from \"../errorHandling\";\nimport client from \"../serviceClient/apiClient\";\n\nconst users = {};\n// call api to register user\n\n/**\n * \n * @param {String} username \n * @param {String} password \n * @param {String} firstName - TODO: refactor name\n * @param {String} lastName - TODO: refactor name\n * @param {String} user_type - admin, patient, physician only \n * @param {String} security_answer_1 \n * @param {String} security_answer_2 \n * @param {String} security_answer_3 \n * @param {Integer} security_question_1 \n * @param {Integer} security_question_2 \n * @param {Integer} security_question_3 \n * @param {String} address \n * @param {String} date_of_birth \n * @param {String} license_number\n * \n * @return {object} - contains msg property. If msg is null, there was a success. If msg is not null, it contains an error message\n */\nexport const registerUser = async (username, password, firstName, lastName,\n    user_type, security_answer_1, security_answer_2, security_answer_3,\n    security_question_1, security_question_2, security_question_3,\n    address, date_of_birth, license_number) => {\n    let args = {\n        username,\n        password,\n        firstName,\n        lastName,\n        user_type,\n\n        security_question_1,\n        security_answer_1,\n        security_question_2,\n        security_answer_2,\n        security_question_3,\n        security_answer_3,\n\n        address,\n        date_of_birth,\n        license_number\n    };\n\n    return client.post('/auth/register', args).then(res => {\n        return {\n            msg: res.msg,\n        };\n    });\n}\n\n// call api to get users\nexport const getUsers = async () => {\n    return client.get('/users').then(users => {\n        return users;\n    })\n}\n\nexport const getQuestions = async (user) => {\n    const response = await client.get('/auth/questions/' + user.user_id);\n    return response.questions;\n}\n\n//call api to check security question answer\nexport const answerSecurityQuestion = async (user, question_id, answer, attempt) => {\n    let response = client.post('/auth/answerquestion',\n        {\n            user: user,\n            question_id: question_id,\n            answer: answer,\n            attempt: attempt\n        });\n    return response;\n}\n\n// call api to register user by username\nexport const getUser = async (username) => {\n    client.get(`/users/${username}`).then(user => {\n        return user;\n    })\n    return users.find({\n        query: {\n            username: username\n        }\n    }).then(u => u.data.length ? u.data[0] : undefined)\n}\n\n// call api to update user\nexport const updateUser = async (user) => {\n    // await users.update(user._id, user, {});\n}\n\n// call api to patch user\nexport const patchUser = async (userId, userPartial) => {\n    return await client.patch(`users/${userId}`, userPartial)\n}\n\n// call api to login user\nexport const loginUser = async (username, password) => {\n    try {\n        if (!username && !password) {\n            let auth = await client.reAuthenticate();\n            return {\n                userId: auth.user?._id,\n                username: auth.user?.username,\n                error: false,\n            }\n        } else {\n            return client.post('/auth/login', { username, password }).then(res => {\n                return {\n                    user: res.data,\n                    msg: null,\n                }\n            })\n        }\n    } catch (error) {\n        console.log(error);\n        let message = error?.message ?? ERROR;\n        return {\n            error: message,\n        };\n    }\n}\n\n// logout user on client\nexport const logout = async () => {\n    return await client.post('/auth/logout');\n}\n\n"]},"metadata":{},"sourceType":"module"}