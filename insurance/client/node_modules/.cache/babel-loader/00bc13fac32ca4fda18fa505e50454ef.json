{"ast":null,"code":"const Base = require('./base');\n\nclass FetchService extends Base {\n  request(options, params) {\n    let fetchOptions = Object.assign({}, options, params.connection);\n    fetchOptions.headers = Object.assign({\n      Accept: 'application/json'\n    }, this.options.headers, fetchOptions.headers);\n\n    if (options.body) {\n      fetchOptions.body = JSON.stringify(options.body);\n    }\n\n    const fetch = this.connection;\n    return fetch(options.url, fetchOptions).then(this.checkStatus).then(response => {\n      if (response.status === 204) {\n        return null;\n      }\n\n      return response.json();\n    });\n  }\n\n  checkStatus(response) {\n    if (response.ok) {\n      return response;\n    }\n\n    return response.json().catch(() => {\n      const ErrorClass = errors[response.status] || Error;\n      return new ErrorClass('JSON parsing error');\n    }).then(error => {\n      error.response = response;\n      throw error;\n    });\n  }\n\n}\n\nmodule.exports = FetchService;","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/healthcare/client/node_modules/@feathersjs/rest-client/lib/fetch.js"],"names":["Base","require","FetchService","request","options","params","fetchOptions","Object","assign","connection","headers","Accept","body","JSON","stringify","fetch","url","then","checkStatus","response","status","json","ok","catch","ErrorClass","errors","Error","error","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAMC,YAAN,SAA2BF,IAA3B,CAAgC;AAC9BG,EAAAA,OAAO,CAAEC,OAAF,EAAWC,MAAX,EAAmB;AACxB,QAAIC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,EAA2BC,MAAM,CAACI,UAAlC,CAAnB;AAEAH,IAAAA,YAAY,CAACI,OAAb,GAAuBH,MAAM,CAACC,MAAP,CAAc;AACnCG,MAAAA,MAAM,EAAE;AAD2B,KAAd,EAEpB,KAAKP,OAAL,CAAaM,OAFO,EAEEJ,YAAY,CAACI,OAFf,CAAvB;;AAIA,QAAIN,OAAO,CAACQ,IAAZ,EAAkB;AAChBN,MAAAA,YAAY,CAACM,IAAb,GAAoBC,IAAI,CAACC,SAAL,CAAeV,OAAO,CAACQ,IAAvB,CAApB;AACD;;AAED,UAAMG,KAAK,GAAG,KAAKN,UAAnB;AAEA,WAAOM,KAAK,CAACX,OAAO,CAACY,GAAT,EAAcV,YAAd,CAAL,CACJW,IADI,CACC,KAAKC,WADN,EAEJD,IAFI,CAECE,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,eAAO,IAAP;AACD;;AAED,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,KARI,CAAP;AASD;;AAEDH,EAAAA,WAAW,CAAEC,QAAF,EAAY;AACrB,QAAIA,QAAQ,CAACG,EAAb,EAAiB;AACf,aAAOH,QAAP;AACD;;AAED,WAAOA,QAAQ,CAACE,IAAT,GAAgBE,KAAhB,CAAsB,MAAM;AACjC,YAAMC,UAAU,GAAGC,MAAM,CAACN,QAAQ,CAACC,MAAV,CAAN,IAA2BM,KAA9C;AAEA,aAAO,IAAIF,UAAJ,CAAe,oBAAf,CAAP;AACD,KAJM,EAIJP,IAJI,CAICU,KAAK,IAAI;AACfA,MAAAA,KAAK,CAACR,QAAN,GAAiBA,QAAjB;AACA,YAAMQ,KAAN;AACD,KAPM,CAAP;AAQD;;AAtC6B;;AAyChCC,MAAM,CAACC,OAAP,GAAiB3B,YAAjB","sourcesContent":["const Base = require('./base');\n\nclass FetchService extends Base {\n  request (options, params) {\n    let fetchOptions = Object.assign({}, options, params.connection);\n\n    fetchOptions.headers = Object.assign({\n      Accept: 'application/json'\n    }, this.options.headers, fetchOptions.headers);\n\n    if (options.body) {\n      fetchOptions.body = JSON.stringify(options.body);\n    }\n\n    const fetch = this.connection;\n\n    return fetch(options.url, fetchOptions)\n      .then(this.checkStatus)\n      .then(response => {\n        if (response.status === 204) {\n          return null;\n        }\n\n        return response.json();\n      });\n  }\n\n  checkStatus (response) {\n    if (response.ok) {\n      return response;\n    }\n\n    return response.json().catch(() => {\n      const ErrorClass = errors[response.status] || Error;\n      \n      return new ErrorClass('JSON parsing error');\n    }).then(error => {\n      error.response = response;\n      throw error;\n    });\n  }\n}\n\nmodule.exports = FetchService;\n"]},"metadata":{},"sourceType":"script"}