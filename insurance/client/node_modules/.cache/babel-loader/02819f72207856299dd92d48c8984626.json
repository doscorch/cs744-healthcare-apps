{"ast":null,"code":"import { ERROR } from \"../errorHandling\";\nimport client from \"../serviceClient/apiClient\";\nconst users = {}; // call api to register user\n\nexport const registerUser = async (username, password, firstName, lastName, user_type, security_answer_1, security_answer_2, security_answer_3, security_question_1, security_question_2, security_question_3, address, date_of_birth, license_number) => {\n  return await users.create({\n    \"username\": username,\n    \"password\": password,\n    \"firstName\": firstName,\n    \"lastName\": lastName,\n    userRole: \"patient\"\n  }, {});\n}; // call api to get users\n\nexport const getUsers = async () => {\n  return users.find().then(u => u.data);\n}; //call api to check security question answer\n\nexport const answerSecurityQuestion = async (user, question_id, answer, attempt) => {\n  client.post(`/question`, {\n    user: user,\n    question_id: question_id,\n    answer: answer,\n    attempt: attempt\n  }).then(success => {\n    return success;\n  });\n}; // call api to register user by username\n\nexport const getUser = async username => {\n  client.get(`/users/${username}`).then(user => {\n    return user;\n  });\n  return users.find({\n    query: {\n      username: username\n    }\n  }).then(u => u.data.length ? u.data[0] : undefined);\n}; // call api to update user\n\nexport const updateUser = async user => {\n  return await users.update(user._id, user, {});\n}; // call api to patch user\n\nexport const patchUser = async userPartial => {\n  return await users.patch(userPartial._id, userPartial, {});\n}; // call api to login user\n\nexport const loginUser = async (username, password) => {\n  try {\n    if (!username && !password) {\n      var _auth$user, _auth$user2;\n\n      let auth = await client.reAuthenticate();\n      return {\n        userId: (_auth$user = auth.user) === null || _auth$user === void 0 ? void 0 : _auth$user._id,\n        username: (_auth$user2 = auth.user) === null || _auth$user2 === void 0 ? void 0 : _auth$user2.username,\n        error: false\n      };\n    } else {\n      return client.post('/auth/login', {\n        username,\n        password\n      }).then(res => {\n        return {\n          user: res.data,\n          msg: null\n        };\n      });\n    }\n  } catch (error) {\n    var _error$message;\n\n    console.log(error);\n    let message = (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : ERROR;\n    return {\n      error: message\n    };\n  }\n}; // logout user on client\n\nexport const logout = async () => {\n  return await client.post('/auth/logout');\n};","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/healthcare/client/src/auth/usersService.js"],"names":["ERROR","client","users","registerUser","username","password","firstName","lastName","user_type","security_answer_1","security_answer_2","security_answer_3","security_question_1","security_question_2","security_question_3","address","date_of_birth","license_number","create","userRole","getUsers","find","then","u","data","answerSecurityQuestion","user","question_id","answer","attempt","post","success","getUser","get","query","length","undefined","updateUser","update","_id","patchUser","userPartial","patch","loginUser","auth","reAuthenticate","userId","error","res","msg","console","log","message","logout"],"mappings":"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","sourcesContent":["\nimport { ERROR } from \"../errorHandling\";\nimport client from \"../serviceClient/apiClient\";\n\nconst users = {};\n// call api to register user\nexport const registerUser = async (username, password, firstName, lastName,\n    user_type, security_answer_1, security_answer_2, security_answer_3,\n    security_question_1, security_question_2, security_question_3,\n    address, date_of_birth, license_number) => {\n    return await users.create({ \"username\": username, \"password\": password, \"firstName\": firstName, \"lastName\": lastName, userRole: \"patient\" }, {});\n}\n\n// call api to get users\nexport const getUsers = async () => {\n    return users.find().then(u => u.data)\n}\n\n//call api to check security question answer\nexport const answerSecurityQuestion = async (user, question_id, answer, attempt) => {\n    client.post(`/question`, \n    {\n        user: user,\n        question_id: question_id,\n        answer: answer,\n        attempt: attempt\n    }).then(success => {\n        return success;\n    });\n}\n\n// call api to register user by username\nexport const getUser = async (username) => {\n    client.get(`/users/${username}`).then(user => {\n        return user;\n    })\n    return users.find({\n        query: {\n            username: username\n        }\n    }).then(u => u.data.length ? u.data[0] : undefined)\n}\n\n// call api to update user\nexport const updateUser = async (user) => {\n    return await users.update(user._id, user, {});\n}\n\n// call api to patch user\nexport const patchUser = async (userPartial) => {\n    return await users.patch(userPartial._id, userPartial, {})\n}\n\n// call api to login user\nexport const loginUser = async (username, password) => {\n    try {\n        if (!username && !password) {\n            let auth = await client.reAuthenticate();\n            return {\n                userId: auth.user?._id,\n                username: auth.user?.username,\n                error: false,\n            }\n        } else {\n            return client.post('/auth/login', { username, password }).then(res => {\n                return {\n                    user: res.data,\n                    msg: null,\n                }\n            })\n        }\n    } catch (error) {\n        console.log(error);\n        let message = error?.message ?? ERROR;\n        return {\n            error: message,\n        };\n    }\n}\n\n// logout user on client\nexport const logout = async () => {\n    return await client.post('/auth/logout');\n}\n\n"]},"metadata":{},"sourceType":"module"}