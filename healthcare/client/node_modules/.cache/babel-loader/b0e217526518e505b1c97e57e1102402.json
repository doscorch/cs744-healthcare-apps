{"ast":null,"code":"const tokenHeader = \"x-csrf\";\nconst serviceUri = \"http://localhost:5000\";\nconst api = {\n  get: path => {\n    let token = sessionStorage.getItem(tokenHeader);\n    const url = `${serviceUri}${path}`;\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-csrf': token\n      }\n    }).then(res => {\n      const resTok = res.headers.get(tokenHeader);\n\n      if (resTok) {\n        token = resTok;\n        sessionStorage.setItem(tokenHeader, token);\n      }\n\n      return res.json();\n    }).catch(err => {\n      console.log(err);\n    });\n  },\n  post: (path, data) => {\n    let token = sessionStorage.getItem(tokenHeader);\n    const url = `${serviceUri}${path}`;\n    return fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-csrf': token\n      },\n      body: JSON.stringify(data)\n    }).then(res => {\n      const resTok = res.headers.get(tokenHeader);\n      console.log(res.headers);\n\n      if (resTok) {\n        token = resTok;\n        sessionStorage.setItem(tokenHeader, token);\n      }\n\n      return res.json();\n    }).then(json => {\n      console.log(json);\n      return json.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n};\nexport default api;","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/healthcare/client/src/apiClient.js"],"names":["tokenHeader","serviceUri","api","get","path","token","sessionStorage","getItem","url","fetch","method","headers","then","res","resTok","setItem","json","catch","err","console","log","post","data","body","JSON","stringify"],"mappings":"AAAA,MAAMA,WAAW,GAAG,QAApB;AACA,MAAMC,UAAU,GAAG,uBAAnB;AACA,MAAMC,GAAG,GAAG;AACRC,EAAAA,GAAG,EAAGC,IAAD,IAAU;AACX,QAAIC,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuBP,WAAvB,CAAZ;AACA,UAAMQ,GAAG,GAAI,GAAEP,UAAW,GAAEG,IAAK,EAAjC;AACA,WAAOK,KAAK,CAACD,GAAD,EAAM;AACdE,MAAAA,MAAM,EAAE,KADM;AAEdC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAUN;AAFL;AAFK,KAAN,CAAL,CAMJO,IANI,CAMCC,GAAG,IAAI;AACX,YAAMC,MAAM,GAAGD,GAAG,CAACF,OAAJ,CAAYR,GAAZ,CAAgBH,WAAhB,CAAf;;AACA,UAAIc,MAAJ,EAAY;AACRT,QAAAA,KAAK,GAAGS,MAAR;AACAR,QAAAA,cAAc,CAACS,OAAf,CAAuBf,WAAvB,EAAoCK,KAApC;AACH;;AACD,aAAOQ,GAAG,CAACG,IAAJ,EAAP;AACH,KAbM,EAaJC,KAbI,CAaEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAfM,CAAP;AAgBH,GApBO;AAqBRG,EAAAA,IAAI,EAAE,CAACjB,IAAD,EAAOkB,IAAP,KAAgB;AAClB,QAAIjB,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuBP,WAAvB,CAAZ;AACA,UAAMQ,GAAG,GAAI,GAAEP,UAAW,GAAEG,IAAK,EAAjC;AACA,WAAOK,KAAK,CAACD,GAAD,EAAM;AACdE,MAAAA,MAAM,EAAE,MADM;AAEdC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAUN;AAFL,OAFK;AAMdkB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf;AANQ,KAAN,CAAL,CAOJV,IAPI,CAOCC,GAAG,IAAI;AACX,YAAMC,MAAM,GAAGD,GAAG,CAACF,OAAJ,CAAYR,GAAZ,CAAgBH,WAAhB,CAAf;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACF,OAAhB;;AACA,UAAIG,MAAJ,EAAY;AACRT,QAAAA,KAAK,GAAGS,MAAR;AACAR,QAAAA,cAAc,CAACS,OAAf,CAAuBf,WAAvB,EAAoCK,KAApC;AACH;;AAED,aAAOQ,GAAG,CAACG,IAAJ,EAAP;AACH,KAhBM,EAgBJJ,IAhBI,CAgBCI,IAAI,IAAI;AACZG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,aAAOA,IAAI,CAACM,IAAZ;AACH,KAnBM,EAmBJL,KAnBI,CAmBEC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KArBM,CAAP;AAsBH;AA9CO,CAAZ;AAiDA,eAAehB,GAAf","sourcesContent":["const tokenHeader = \"x-csrf\";\nconst serviceUri = \"http://localhost:5000\";\nconst api = {\n    get: (path) => {\n        let token = sessionStorage.getItem(tokenHeader);\n        const url = `${serviceUri}${path}`;\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-csrf': token,\n            },\n        }).then(res => {\n            const resTok = res.headers.get(tokenHeader);\n            if (resTok) {\n                token = resTok;\n                sessionStorage.setItem(tokenHeader, token);\n            }\n            return res.json();\n        }).catch(err => {\n            console.log(err);\n        });\n    },\n    post: (path, data) => {\n        let token = sessionStorage.getItem(tokenHeader);\n        const url = `${serviceUri}${path}`;\n        return fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-csrf': token,\n            },\n            body: JSON.stringify(data),\n        }).then(res => {\n            const resTok = res.headers.get(tokenHeader);\n            console.log(res.headers);\n            if (resTok) {\n                token = resTok;\n                sessionStorage.setItem(tokenHeader, token);\n            }\n\n            return res.json();\n        }).then(json => {\n            console.log(json);\n            return json.data\n        }).catch(err => {\n            console.log(err);\n        });\n    },\n};\n\nexport default api;"]},"metadata":{},"sourceType":"module"}