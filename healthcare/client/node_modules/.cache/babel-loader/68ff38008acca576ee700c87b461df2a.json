{"ast":null,"code":"const jQueryClient = require('./jquery');\n\nconst SuperagentClient = require('./superagent');\n\nconst RequestClient = require('./request');\n\nconst FetchClient = require('./fetch');\n\nconst AxiosClient = require('./axios');\n\nconst AngularClient = require('./angular');\n\nconst Base = require('./base');\n\nconst AngularHttpClient = require('./angular-http-client');\n\nconst transports = {\n  jquery: jQueryClient,\n  superagent: SuperagentClient,\n  request: RequestClient,\n  fetch: FetchClient,\n  axios: AxiosClient,\n  angular: AngularClient,\n  angularHttpClient: AngularHttpClient\n};\n\nfunction restClient(base = '') {\n  const result = {\n    Base\n  };\n  Object.keys(transports).forEach(key => {\n    result[key] = function (connection, options = {}, Service = transports[key]) {\n      if (!connection) {\n        throw new Error(`${key} has to be provided to feathers-rest`);\n      }\n\n      if (typeof options === 'function') {\n        Service = options;\n        options = {};\n      }\n\n      const defaultService = function (name) {\n        return new Service({\n          base,\n          name,\n          connection,\n          options\n        });\n      };\n\n      const initialize = function (app) {\n        if (typeof app.defaultService === 'function') {\n          throw new Error('Only one default client provider can be configured');\n        }\n\n        app.rest = connection;\n        app.defaultService = defaultService;\n      };\n\n      initialize.Service = Service;\n      initialize.service = defaultService;\n      return initialize;\n    };\n  });\n  return result;\n}\n\nmodule.exports = Object.assign(restClient, {\n  SuperagentClient,\n  FetchClient,\n  jQueryClient,\n  RequestClient,\n  AxiosClient,\n  AngularClient,\n  AngularHttpClient\n});\nmodule.exports.default = restClient;","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/healthcare/client/node_modules/@feathersjs/rest-client/lib/index.js"],"names":["jQueryClient","require","SuperagentClient","RequestClient","FetchClient","AxiosClient","AngularClient","Base","AngularHttpClient","transports","jquery","superagent","request","fetch","axios","angular","angularHttpClient","restClient","base","result","Object","keys","forEach","key","connection","options","Service","Error","defaultService","name","initialize","app","rest","service","module","exports","assign","default"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,UAAD,CAA5B;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,cAAD,CAAhC;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,SAAD,CAA3B;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,SAAD,CAA3B;;AACA,MAAMK,aAAa,GAAGL,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAMM,IAAI,GAAGN,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMO,iBAAiB,GAAGP,OAAO,CAAC,uBAAD,CAAjC;;AAEA,MAAMQ,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAEV,YADS;AAEjBW,EAAAA,UAAU,EAAET,gBAFK;AAGjBU,EAAAA,OAAO,EAAET,aAHQ;AAIjBU,EAAAA,KAAK,EAAET,WAJU;AAKjBU,EAAAA,KAAK,EAAET,WALU;AAMjBU,EAAAA,OAAO,EAAET,aANQ;AAOjBU,EAAAA,iBAAiB,EAAER;AAPF,CAAnB;;AAUA,SAASS,UAAT,CAAqBC,IAAI,GAAG,EAA5B,EAAgC;AAC9B,QAAMC,MAAM,GAAG;AAAEZ,IAAAA;AAAF,GAAf;AAEAa,EAAAA,MAAM,CAACC,IAAP,CAAYZ,UAAZ,EAAwBa,OAAxB,CAAgCC,GAAG,IAAI;AACrCJ,IAAAA,MAAM,CAACI,GAAD,CAAN,GAAc,UAAUC,UAAV,EAAsBC,OAAO,GAAG,EAAhC,EAAoCC,OAAO,GAAGjB,UAAU,CAACc,GAAD,CAAxD,EAA+D;AAC3E,UAAI,CAACC,UAAL,EAAiB;AACf,cAAM,IAAIG,KAAJ,CAAW,GAAEJ,GAAI,sCAAjB,CAAN;AACD;;AAED,UAAI,OAAOE,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,QAAAA,OAAO,GAAGD,OAAV;AACAA,QAAAA,OAAO,GAAG,EAAV;AACD;;AAED,YAAMG,cAAc,GAAG,UAAUC,IAAV,EAAgB;AACrC,eAAO,IAAIH,OAAJ,CAAY;AAAER,UAAAA,IAAF;AAAQW,UAAAA,IAAR;AAAcL,UAAAA,UAAd;AAA0BC,UAAAA;AAA1B,SAAZ,CAAP;AACD,OAFD;;AAIA,YAAMK,UAAU,GAAG,UAAUC,GAAV,EAAe;AAChC,YAAI,OAAOA,GAAG,CAACH,cAAX,KAA8B,UAAlC,EAA8C;AAC5C,gBAAM,IAAID,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAEDI,QAAAA,GAAG,CAACC,IAAJ,GAAWR,UAAX;AACAO,QAAAA,GAAG,CAACH,cAAJ,GAAqBA,cAArB;AACD,OAPD;;AASAE,MAAAA,UAAU,CAACJ,OAAX,GAAqBA,OAArB;AACAI,MAAAA,UAAU,CAACG,OAAX,GAAqBL,cAArB;AAEA,aAAOE,UAAP;AACD,KA3BD;AA4BD,GA7BD;AA+BA,SAAOX,MAAP;AACD;;AAEDe,MAAM,CAACC,OAAP,GAAiBf,MAAM,CAACgB,MAAP,CAAcnB,UAAd,EAA0B;AAAEf,EAAAA,gBAAF;AAAoBE,EAAAA,WAApB;AAAiCJ,EAAAA,YAAjC;AAA+CG,EAAAA,aAA/C;AAA8DE,EAAAA,WAA9D;AAA2EC,EAAAA,aAA3E;AAA0FE,EAAAA;AAA1F,CAA1B,CAAjB;AACA0B,MAAM,CAACC,OAAP,CAAeE,OAAf,GAAyBpB,UAAzB","sourcesContent":["const jQueryClient = require('./jquery');\nconst SuperagentClient = require('./superagent');\nconst RequestClient = require('./request');\nconst FetchClient = require('./fetch');\nconst AxiosClient = require('./axios');\nconst AngularClient = require('./angular');\nconst Base = require('./base');\nconst AngularHttpClient = require('./angular-http-client');\n\nconst transports = {\n  jquery: jQueryClient,\n  superagent: SuperagentClient,\n  request: RequestClient,\n  fetch: FetchClient,\n  axios: AxiosClient,\n  angular: AngularClient,\n  angularHttpClient: AngularHttpClient\n};\n\nfunction restClient (base = '') {\n  const result = { Base };\n\n  Object.keys(transports).forEach(key => {\n    result[key] = function (connection, options = {}, Service = transports[key]) {\n      if (!connection) {\n        throw new Error(`${key} has to be provided to feathers-rest`);\n      }\n\n      if (typeof options === 'function') {\n        Service = options;\n        options = {};\n      }\n\n      const defaultService = function (name) {\n        return new Service({ base, name, connection, options });\n      };\n\n      const initialize = function (app) {\n        if (typeof app.defaultService === 'function') {\n          throw new Error('Only one default client provider can be configured');\n        }\n\n        app.rest = connection;\n        app.defaultService = defaultService;\n      };\n\n      initialize.Service = Service;\n      initialize.service = defaultService;\n\n      return initialize;\n    };\n  });\n\n  return result;\n}\n\nmodule.exports = Object.assign(restClient, { SuperagentClient, FetchClient, jQueryClient, RequestClient, AxiosClient, AngularClient, AngularHttpClient });\nmodule.exports.default = restClient;\n"]},"metadata":{},"sourceType":"script"}