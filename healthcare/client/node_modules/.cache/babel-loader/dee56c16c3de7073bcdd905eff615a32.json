{"ast":null,"code":"import { ERROR } from \"../errorHandling\";\nimport client from \"../apiClient\";\nconst users = {}; // call api to register user\n\nexport const registerUser = async (username, password, firstName, lastName) => {\n  return await users.create({\n    \"username\": username,\n    \"password\": password,\n    \"firstName\": firstName,\n    \"lastName\": lastName,\n    userRole: \"patient\"\n  }, {});\n}; // call api to get users\n\nexport const getUsers = async () => {\n  return users.find().then(u => u.data);\n}; // call api to register user by username\n\nexport const getUser = async username => {\n  client.get(`/users/${username}`).then(user => {\n    return user;\n  });\n  return users.find({\n    query: {\n      username: username\n    }\n  }).then(u => u.data.length ? u.data[0] : undefined);\n}; // call api to update user\n\nexport const updateUser = async user => {\n  return await users.update(user._id, user, {});\n}; // call api to patch user\n\nexport const patchUser = async userPartial => {\n  return await users.patch(userPartial._id, userPartial, {});\n}; // call api to login user\n\nexport const loginUser = async (username, password) => {\n  try {\n    if (!username && !password) {\n      var _auth$user, _auth$user2;\n\n      let auth = await client.reAuthenticate();\n      return {\n        userId: (_auth$user = auth.user) === null || _auth$user === void 0 ? void 0 : _auth$user._id,\n        username: (_auth$user2 = auth.user) === null || _auth$user2 === void 0 ? void 0 : _auth$user2.username,\n        error: false\n      };\n    } else {\n      return client.post('/auth/login', {\n        username,\n        password\n      }).then(user => {\n        return {\n          user: user,\n          error: false\n        };\n      }); // let auth = await client.authenticate({\n      //     strategy: 'local',\n      //     username: username,\n      //     password: password,\n      // });\n      // return {\n      //     user: auth.user,\n      //     error: false,\n      // }\n    }\n  } catch (error) {\n    var _error$message;\n\n    console.log(error);\n    let message = (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : ERROR;\n    return {\n      error: message\n    };\n  }\n}; // logout user on client\n\nexport const logout = async () => {\n  return await client.logout();\n};","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/healthcare/client/src/auth/usersService.js"],"names":["ERROR","client","users","registerUser","username","password","firstName","lastName","create","userRole","getUsers","find","then","u","data","getUser","get","user","query","length","undefined","updateUser","update","_id","patchUser","userPartial","patch","loginUser","auth","reAuthenticate","userId","error","post","console","log","message","logout"],"mappings":"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","sourcesContent":["\nimport { ERROR } from \"../errorHandling\";\nimport client from \"../apiClient\";\n\nconst users = {};\n// call api to register user\nexport const registerUser = async (username, password, firstName, lastName) => {\n    return await users.create({ \"username\": username, \"password\": password, \"firstName\": firstName, \"lastName\": lastName, userRole: \"patient\" }, {});\n}\n\n// call api to get users\nexport const getUsers = async () => {\n    return users.find().then(u => u.data)\n}\n\n// call api to register user by username\nexport const getUser = async (username) => {\n    client.get(`/users/${username}`).then(user => {\n        return user;\n    })\n    return users.find({\n        query: {\n            username: username\n        }\n    }).then(u => u.data.length ? u.data[0] : undefined)\n}\n\n// call api to update user\nexport const updateUser = async (user) => {\n    return await users.update(user._id, user, {});\n}\n\n// call api to patch user\nexport const patchUser = async (userPartial) => {\n    return await users.patch(userPartial._id, userPartial, {})\n}\n\n// call api to login user\nexport const loginUser = async (username, password) => {\n    try {\n        if (!username && !password) {\n            let auth = await client.reAuthenticate();\n            return {\n                userId: auth.user?._id,\n                username: auth.user?.username,\n                error: false,\n            }\n        } else {\n            return client.post('/auth/login', { username, password }).then(user => {\n                return {\n                    user: user,\n                    error: false,\n                }\n            })\n            // let auth = await client.authenticate({\n            //     strategy: 'local',\n            //     username: username,\n            //     password: password,\n            // });\n            // return {\n            //     user: auth.user,\n            //     error: false,\n            // }\n        }\n    } catch (error) {\n        console.log(error);\n        let message = error?.message ?? ERROR;\n        return {\n            error: message,\n        };\n    }\n}\n\n// logout user on client\nexport const logout = async () => {\n    return await client.logout();\n}\n\n"]},"metadata":{},"sourceType":"module"}