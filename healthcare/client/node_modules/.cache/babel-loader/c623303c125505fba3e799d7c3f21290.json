{"ast":null,"code":"import { ERROR } from \"../errorHandling\";\nimport client from \"../serviceClient/apiClient\";\nconst users = {}; // call api to register user\n\n/**\n * \n * @param {String} username \n * @param {String} password \n * @param {String} firstName - TODO: refactor name\n * @param {String} lastName - TODO: refactor name\n * @param {String} user_type - admin, patient, physician only \n * @param {String} security_answer_1 \n * @param {String} security_answer_2 \n * @param {String} security_answer_3 \n * @param {Integer} security_question_1 \n * @param {Integer} security_question_2 \n * @param {Integer} security_question_3 \n * @param {String} address \n * @param {String} date_of_birth \n * @param {String} license_number\n * \n * @return {object} - contains msg property. If msg is null, there was a success. If msg is not null, it contains an error message\n */\n\nexport const registerUser = async (username, password, firstName, lastName, user_type, security_answer_1, security_answer_2, security_answer_3, security_question_1, security_question_2, security_question_3, address, date_of_birth, license_number) => {\n  let args = {\n    username,\n    password,\n    firstName,\n    lastName,\n    user_type,\n    security_question_1,\n    security_answer_1,\n    security_question_2,\n    security_answer_2,\n    security_question_3,\n    security_answer_3,\n    address,\n    date_of_birth,\n    license_number\n  };\n  return client.post('/auth/register', args).then(res => {\n    return {\n      msg: res.msg\n    };\n  });\n}; // call api to get users\n\nexport const getUsers = async () => {\n  return users.find().then(u => u.data);\n}; //call api to check security question answer\n\nexport const answerSecurityQuestion = async (user, question_id, answer, attempt) => {\n  client.post(`/question`, {\n    user: user,\n    question_id: question_id,\n    answer: answer,\n    attempt: attempt\n  }).then(success => {\n    return success;\n  });\n}; // call api to register user by username\n\nexport const getUser = async username => {\n  client.get(`/users/${username}`).then(user => {\n    return user;\n  });\n  return users.find({\n    query: {\n      username: username\n    }\n  }).then(u => u.data.length ? u.data[0] : undefined);\n}; // call api to update user\n\nexport const updateUser = async user => {\n  return await users.update(user._id, user, {});\n}; // call api to patch user\n\nexport const patchUser = async userPartial => {\n  return await users.patch(userPartial._id, userPartial, {});\n}; // call api to login user\n\nexport const loginUser = async (username, password) => {\n  try {\n    if (!username && !password) {\n      var _auth$user, _auth$user2;\n\n      let auth = await client.reAuthenticate();\n      return {\n        userId: (_auth$user = auth.user) === null || _auth$user === void 0 ? void 0 : _auth$user._id,\n        username: (_auth$user2 = auth.user) === null || _auth$user2 === void 0 ? void 0 : _auth$user2.username,\n        error: false\n      };\n    } else {\n      return client.post('/auth/login', {\n        username,\n        password\n      }).then(res => {\n        return {\n          user: res.data,\n          msg: null\n        };\n      });\n    }\n  } catch (error) {\n    var _error$message;\n\n    console.log(error);\n    let message = (_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : ERROR;\n    return {\n      error: message\n    };\n  }\n}; // logout user on client\n\nexport const logout = async () => {\n  return await client.post('/auth/logout');\n};","map":{"version":3,"sources":["/Users/doscorch/Desktop/cs744 project/healthcare/client/src/auth/usersService.js"],"names":["ERROR","client","users","registerUser","username","password","firstName","lastName","user_type","security_answer_1","security_answer_2","security_answer_3","security_question_1","security_question_2","security_question_3","address","date_of_birth","license_number","args","post","then","res","msg","getUsers","find","u","data","answerSecurityQuestion","user","question_id","answer","attempt","success","getUser","get","query","length","undefined","updateUser","update","_id","patchUser","userPartial","patch","loginUser","auth","reAuthenticate","userId","error","console","log","message","logout"],"mappings":"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","sourcesContent":["\nimport { ERROR } from \"../errorHandling\";\nimport client from \"../serviceClient/apiClient\";\n\nconst users = {};\n// call api to register user\n\n/**\n * \n * @param {String} username \n * @param {String} password \n * @param {String} firstName - TODO: refactor name\n * @param {String} lastName - TODO: refactor name\n * @param {String} user_type - admin, patient, physician only \n * @param {String} security_answer_1 \n * @param {String} security_answer_2 \n * @param {String} security_answer_3 \n * @param {Integer} security_question_1 \n * @param {Integer} security_question_2 \n * @param {Integer} security_question_3 \n * @param {String} address \n * @param {String} date_of_birth \n * @param {String} license_number\n * \n * @return {object} - contains msg property. If msg is null, there was a success. If msg is not null, it contains an error message\n */\nexport const registerUser = async (username, password, firstName, lastName,\n    user_type, security_answer_1, security_answer_2, security_answer_3,\n    security_question_1, security_question_2, security_question_3,\n    address, date_of_birth, license_number) => {\n        let args = {\n            username,\n            password,\n            firstName,\n            lastName,\n            user_type,\n\n            security_question_1,\n            security_answer_1,\n            security_question_2,\n            security_answer_2,\n            security_question_3,\n            security_answer_3,\n\n            address,\n            date_of_birth,\n            license_number\n        };\n\n        return client.post('/auth/register', args ).then(res => {\n            return {\n                msg: res.msg,\n            };\n        });\n}\n\n// call api to get users\nexport const getUsers = async () => {\n    return users.find().then(u => u.data)\n}\n\n//call api to check security question answer\nexport const answerSecurityQuestion = async (user, question_id, answer, attempt) => {\n    client.post(`/question`, \n    {\n        user: user,\n        question_id: question_id,\n        answer: answer,\n        attempt: attempt\n    }).then(success => {\n        return success;\n    });\n}\n\n// call api to register user by username\nexport const getUser = async (username) => {\n    client.get(`/users/${username}`).then(user => {\n        return user;\n    })\n    return users.find({\n        query: {\n            username: username\n        }\n    }).then(u => u.data.length ? u.data[0] : undefined)\n}\n\n// call api to update user\nexport const updateUser = async (user) => {\n    return await users.update(user._id, user, {});\n}\n\n// call api to patch user\nexport const patchUser = async (userPartial) => {\n    return await users.patch(userPartial._id, userPartial, {})\n}\n\n// call api to login user\nexport const loginUser = async (username, password) => {\n    try {\n        if (!username && !password) {\n            let auth = await client.reAuthenticate();\n            return {\n                userId: auth.user?._id,\n                username: auth.user?.username,\n                error: false,\n            }\n        } else {\n            return client.post('/auth/login', { username, password }).then(res => {\n                return {\n                    user: res.data,\n                    msg: null,\n                }\n            })\n        }\n    } catch (error) {\n        console.log(error);\n        let message = error?.message ?? ERROR;\n        return {\n            error: message,\n        };\n    }\n}\n\n// logout user on client\nexport const logout = async () => {\n    return await client.post('/auth/logout');\n}\n\n"]},"metadata":{},"sourceType":"module"}